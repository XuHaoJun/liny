/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class SubscriptionPeriodTile : IEquatable<SubscriptionPeriodTile>
    {
        /// <summary>
        /// Subscription period. Possible values: `within7days`, `within90days`, `unknown` etc.
        /// </summary>
        /// <value>Subscription period. Possible values: `within7days`, `within90days`, `unknown` etc.</value>

        public enum SubscriptionPeriodEnum
        {
            /// <summary>
            /// Enum Within7daysEnum for within7days
            /// </summary>
            [EnumMember(Value = "within7days")]
            Within7daysEnum = 1,

            /// <summary>
            /// Enum Within30daysEnum for within30days
            /// </summary>
            [EnumMember(Value = "within30days")]
            Within30daysEnum = 2,

            /// <summary>
            /// Enum Within90daysEnum for within90days
            /// </summary>
            [EnumMember(Value = "within90days")]
            Within90daysEnum = 3,

            /// <summary>
            /// Enum Within180daysEnum for within180days
            /// </summary>
            [EnumMember(Value = "within180days")]
            Within180daysEnum = 4,

            /// <summary>
            /// Enum Within365daysEnum for within365days
            /// </summary>
            [EnumMember(Value = "within365days")]
            Within365daysEnum = 5,

            /// <summary>
            /// Enum Over365daysEnum for over365days
            /// </summary>
            [EnumMember(Value = "over365days")]
            Over365daysEnum = 6,

            /// <summary>
            /// Enum UnknownEnum for unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            UnknownEnum = 7,
        }

        /// <summary>
        /// Subscription period. Possible values: &#x60;within7days&#x60;, &#x60;within90days&#x60;, &#x60;unknown&#x60; etc.
        /// </summary>
        /// <value>Subscription period. Possible values: &#x60;within7days&#x60;, &#x60;within90days&#x60;, &#x60;unknown&#x60; etc.</value>
        [DataMember(Name = "subscriptionPeriod", EmitDefaultValue = true)]
        public SubscriptionPeriodEnum SubscriptionPeriod { get; set; }

        /// <summary>
        /// Percentage. Possible values: [0.0,100.0] e.g. 0, 2.9, 37.6.
        /// </summary>
        /// <value>Percentage. Possible values: [0.0,100.0] e.g. 0, 2.9, 37.6.</value>
        [DataMember(Name = "percentage", EmitDefaultValue = true)]
        public double Percentage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionPeriodTile {\n");
            sb.Append("  SubscriptionPeriod: ").Append(SubscriptionPeriod).Append("\n");
            sb.Append("  Percentage: ").Append(Percentage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions { WriteIndented = true };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((SubscriptionPeriodTile)obj);
        }

        /// <summary>
        /// Returns true if SubscriptionPeriodTile instances are equal
        /// </summary>
        /// <param name="other">Instance of SubscriptionPeriodTile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionPeriodTile other)
        {
            if (other is null)
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (
                    SubscriptionPeriod == other.SubscriptionPeriod
                    || SubscriptionPeriod.Equals(other.SubscriptionPeriod)
                ) && (Percentage == other.Percentage || Percentage.Equals(other.Percentage));
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)

                hashCode = hashCode * 59 + SubscriptionPeriod.GetHashCode();

                hashCode = hashCode * 59 + Percentage.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(SubscriptionPeriodTile left, SubscriptionPeriodTile right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SubscriptionPeriodTile left, SubscriptionPeriodTile right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
