/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BotInfoResponse : IEquatable<BotInfoResponse>
    {
        /// <summary>
        /// Bot&#39;s user ID
        /// </summary>
        /// <value>Bot&#39;s user ID</value>
        [Required]
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// Bot&#39;s basic ID
        /// </summary>
        /// <value>Bot&#39;s basic ID</value>
        [Required]
        [DataMember(Name="basicId", EmitDefaultValue=false)]
        public string BasicId { get; set; }

        /// <summary>
        /// Bot&#39;s premium ID. Not included in the response if the premium ID isn&#39;t set.
        /// </summary>
        /// <value>Bot&#39;s premium ID. Not included in the response if the premium ID isn&#39;t set.</value>
        [DataMember(Name="premiumId", EmitDefaultValue=false)]
        public string PremiumId { get; set; }

        /// <summary>
        /// Bot&#39;s display name
        /// </summary>
        /// <value>Bot&#39;s display name</value>
        [Required]
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Profile image URL. &#x60;https&#x60; image URL. Not included in the response if the bot doesn&#39;t have a profile image.
        /// </summary>
        /// <value>Profile image URL. &#x60;https&#x60; image URL. Not included in the response if the bot doesn&#39;t have a profile image.</value>
        [DataMember(Name="pictureUrl", EmitDefaultValue=false)]
        public string PictureUrl { get; set; }


        /// <summary>
        /// Chat settings set in the LINE Official Account Manager. One of:  `chat`: Chat is set to \"On\". `bot`: Chat is set to \"Off\". 
        /// </summary>
        /// <value>Chat settings set in the LINE Official Account Manager. One of:  `chat`: Chat is set to \"On\". `bot`: Chat is set to \"Off\". </value>
        
        public enum ChatModeEnum
        {
            
            /// <summary>
            /// Enum ChatEnum for chat
            /// </summary>
            [EnumMember(Value = "chat")]
            ChatEnum = 1,
            
            /// <summary>
            /// Enum BotEnum for bot
            /// </summary>
            [EnumMember(Value = "bot")]
            BotEnum = 2
        }

        /// <summary>
        /// Chat settings set in the LINE Official Account Manager. One of:  &#x60;chat&#x60;: Chat is set to \&quot;On\&quot;. &#x60;bot&#x60;: Chat is set to \&quot;Off\&quot;. 
        /// </summary>
        /// <value>Chat settings set in the LINE Official Account Manager. One of:  &#x60;chat&#x60;: Chat is set to \&quot;On\&quot;. &#x60;bot&#x60;: Chat is set to \&quot;Off\&quot;. </value>
        [Required]
        [DataMember(Name="chatMode", EmitDefaultValue=true)]
        public ChatModeEnum ChatMode { get; set; }


        /// <summary>
        /// Automatic read setting for messages. If the chat is set to \"Off\", auto is returned. If the chat is set to \"On\", manual is returned.  `auto`: Auto read setting is enabled. `manual`: Auto read setting is disabled.  
        /// </summary>
        /// <value>Automatic read setting for messages. If the chat is set to \"Off\", auto is returned. If the chat is set to \"On\", manual is returned.  `auto`: Auto read setting is enabled. `manual`: Auto read setting is disabled.  </value>
        
        public enum MarkAsReadModeEnum
        {
            
            /// <summary>
            /// Enum AutoEnum for auto
            /// </summary>
            [EnumMember(Value = "auto")]
            AutoEnum = 1,
            
            /// <summary>
            /// Enum ManualEnum for manual
            /// </summary>
            [EnumMember(Value = "manual")]
            ManualEnum = 2
        }

        /// <summary>
        /// Automatic read setting for messages. If the chat is set to \&quot;Off\&quot;, auto is returned. If the chat is set to \&quot;On\&quot;, manual is returned.  &#x60;auto&#x60;: Auto read setting is enabled. &#x60;manual&#x60;: Auto read setting is disabled.  
        /// </summary>
        /// <value>Automatic read setting for messages. If the chat is set to \&quot;Off\&quot;, auto is returned. If the chat is set to \&quot;On\&quot;, manual is returned.  &#x60;auto&#x60;: Auto read setting is enabled. &#x60;manual&#x60;: Auto read setting is disabled.  </value>
        [Required]
        [DataMember(Name="markAsReadMode", EmitDefaultValue=true)]
        public MarkAsReadModeEnum MarkAsReadMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BotInfoResponse {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  BasicId: ").Append(BasicId).Append("\n");
            sb.Append("  PremiumId: ").Append(PremiumId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  PictureUrl: ").Append(PictureUrl).Append("\n");
            sb.Append("  ChatMode: ").Append(ChatMode).Append("\n");
            sb.Append("  MarkAsReadMode: ").Append(MarkAsReadMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BotInfoResponse)obj);
        }

        /// <summary>
        /// Returns true if BotInfoResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of BotInfoResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BotInfoResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                ) && 
                (
                    BasicId == other.BasicId ||
                    BasicId != null &&
                    BasicId.Equals(other.BasicId)
                ) && 
                (
                    PremiumId == other.PremiumId ||
                    PremiumId != null &&
                    PremiumId.Equals(other.PremiumId)
                ) && 
                (
                    DisplayName == other.DisplayName ||
                    DisplayName != null &&
                    DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    PictureUrl == other.PictureUrl ||
                    PictureUrl != null &&
                    PictureUrl.Equals(other.PictureUrl)
                ) && 
                (
                    ChatMode == other.ChatMode ||
                    
                    ChatMode.Equals(other.ChatMode)
                ) && 
                (
                    MarkAsReadMode == other.MarkAsReadMode ||
                    
                    MarkAsReadMode.Equals(other.MarkAsReadMode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (BasicId != null)
                    hashCode = hashCode * 59 + BasicId.GetHashCode();
                    if (PremiumId != null)
                    hashCode = hashCode * 59 + PremiumId.GetHashCode();
                    if (DisplayName != null)
                    hashCode = hashCode * 59 + DisplayName.GetHashCode();
                    if (PictureUrl != null)
                    hashCode = hashCode * 59 + PictureUrl.GetHashCode();
                    
                    hashCode = hashCode * 59 + ChatMode.GetHashCode();
                    
                    hashCode = hashCode * 59 + MarkAsReadMode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BotInfoResponse left, BotInfoResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BotInfoResponse left, BotInfoResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
