/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class GetMessageEventResponseMessage : IEquatable<GetMessageEventResponseMessage>
    {
        /// <summary>
        /// Bubble&#39;s serial number.
        /// </summary>
        /// <value>Bubble&#39;s serial number.</value>
        [DataMember(Name = "seq", EmitDefaultValue = true)]
        public int Seq { get; set; }

        /// <summary>
        /// Number of times the bubble was displayed.
        /// </summary>
        /// <value>Number of times the bubble was displayed.</value>
        [DataMember(Name = "impression", EmitDefaultValue = true)]
        public long? Impression { get; set; }

        /// <summary>
        /// Number of times audio or video in the bubble started playing.
        /// </summary>
        /// <value>Number of times audio or video in the bubble started playing.</value>
        [DataMember(Name = "mediaPlayed", EmitDefaultValue = true)]
        public long? MediaPlayed { get; set; }

        /// <summary>
        /// Number of times audio or video in the bubble started playing and was played 25% of the total time.
        /// </summary>
        /// <value>Number of times audio or video in the bubble started playing and was played 25% of the total time.</value>
        [DataMember(Name = "mediaPlayed25Percent", EmitDefaultValue = true)]
        public long? MediaPlayed25Percent { get; set; }

        /// <summary>
        /// Number of times audio or video in the bubble started playing and was played 50% of the total time.
        /// </summary>
        /// <value>Number of times audio or video in the bubble started playing and was played 50% of the total time.</value>
        [DataMember(Name = "mediaPlayed50Percent", EmitDefaultValue = true)]
        public long? MediaPlayed50Percent { get; set; }

        /// <summary>
        /// Number of times audio or video in the bubble started playing and was played 75% of the total time.
        /// </summary>
        /// <value>Number of times audio or video in the bubble started playing and was played 75% of the total time.</value>
        [DataMember(Name = "mediaPlayed75Percent", EmitDefaultValue = true)]
        public long? MediaPlayed75Percent { get; set; }

        /// <summary>
        /// Number of times audio or video in the bubble started playing and was played 100% of the total time.
        /// </summary>
        /// <value>Number of times audio or video in the bubble started playing and was played 100% of the total time.</value>
        [DataMember(Name = "mediaPlayed100Percent", EmitDefaultValue = true)]
        public long? MediaPlayed100Percent { get; set; }

        /// <summary>
        /// Number of users that started playing audio or video in the bubble.
        /// </summary>
        /// <value>Number of users that started playing audio or video in the bubble.</value>
        [DataMember(Name = "uniqueMediaPlayed", EmitDefaultValue = true)]
        public long? UniqueMediaPlayed { get; set; }

        /// <summary>
        /// Number of users that started playing audio or video in the bubble and played 25% of the total time.
        /// </summary>
        /// <value>Number of users that started playing audio or video in the bubble and played 25% of the total time.</value>
        [DataMember(Name = "uniqueMediaPlayed25Percent", EmitDefaultValue = true)]
        public long? UniqueMediaPlayed25Percent { get; set; }

        /// <summary>
        /// Number of users that started playing audio or video in the bubble and played 50% of the total time.
        /// </summary>
        /// <value>Number of users that started playing audio or video in the bubble and played 50% of the total time.</value>
        [DataMember(Name = "uniqueMediaPlayed50Percent", EmitDefaultValue = true)]
        public long? UniqueMediaPlayed50Percent { get; set; }

        /// <summary>
        /// Number of users that started playing audio or video in the bubble and played 75% of the total time.
        /// </summary>
        /// <value>Number of users that started playing audio or video in the bubble and played 75% of the total time.</value>
        [DataMember(Name = "uniqueMediaPlayed75Percent", EmitDefaultValue = true)]
        public long? UniqueMediaPlayed75Percent { get; set; }

        /// <summary>
        /// Number of users that started playing audio or video in the bubble and played 100% of the total time.
        /// </summary>
        /// <value>Number of users that started playing audio or video in the bubble and played 100% of the total time.</value>
        [DataMember(Name = "uniqueMediaPlayed100Percent", EmitDefaultValue = true)]
        public long? UniqueMediaPlayed100Percent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetMessageEventResponseMessage {\n");
            sb.Append("  Seq: ").Append(Seq).Append("\n");
            sb.Append("  Impression: ").Append(Impression).Append("\n");
            sb.Append("  MediaPlayed: ").Append(MediaPlayed).Append("\n");
            sb.Append("  MediaPlayed25Percent: ").Append(MediaPlayed25Percent).Append("\n");
            sb.Append("  MediaPlayed50Percent: ").Append(MediaPlayed50Percent).Append("\n");
            sb.Append("  MediaPlayed75Percent: ").Append(MediaPlayed75Percent).Append("\n");
            sb.Append("  MediaPlayed100Percent: ").Append(MediaPlayed100Percent).Append("\n");
            sb.Append("  UniqueMediaPlayed: ").Append(UniqueMediaPlayed).Append("\n");
            sb.Append("  UniqueMediaPlayed25Percent: ")
                .Append(UniqueMediaPlayed25Percent)
                .Append("\n");
            sb.Append("  UniqueMediaPlayed50Percent: ")
                .Append(UniqueMediaPlayed50Percent)
                .Append("\n");
            sb.Append("  UniqueMediaPlayed75Percent: ")
                .Append(UniqueMediaPlayed75Percent)
                .Append("\n");
            sb.Append("  UniqueMediaPlayed100Percent: ")
                .Append(UniqueMediaPlayed100Percent)
                .Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions { WriteIndented = true };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((GetMessageEventResponseMessage)obj);
        }

        /// <summary>
        /// Returns true if GetMessageEventResponseMessage instances are equal
        /// </summary>
        /// <param name="other">Instance of GetMessageEventResponseMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetMessageEventResponseMessage other)
        {
            if (other is null)
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (Seq == other.Seq || Seq.Equals(other.Seq))
                && (
                    Impression == other.Impression
                    || Impression != null && Impression.Equals(other.Impression)
                )
                && (
                    MediaPlayed == other.MediaPlayed
                    || MediaPlayed != null && MediaPlayed.Equals(other.MediaPlayed)
                )
                && (
                    MediaPlayed25Percent == other.MediaPlayed25Percent
                    || MediaPlayed25Percent != null
                        && MediaPlayed25Percent.Equals(other.MediaPlayed25Percent)
                )
                && (
                    MediaPlayed50Percent == other.MediaPlayed50Percent
                    || MediaPlayed50Percent != null
                        && MediaPlayed50Percent.Equals(other.MediaPlayed50Percent)
                )
                && (
                    MediaPlayed75Percent == other.MediaPlayed75Percent
                    || MediaPlayed75Percent != null
                        && MediaPlayed75Percent.Equals(other.MediaPlayed75Percent)
                )
                && (
                    MediaPlayed100Percent == other.MediaPlayed100Percent
                    || MediaPlayed100Percent != null
                        && MediaPlayed100Percent.Equals(other.MediaPlayed100Percent)
                )
                && (
                    UniqueMediaPlayed == other.UniqueMediaPlayed
                    || UniqueMediaPlayed != null
                        && UniqueMediaPlayed.Equals(other.UniqueMediaPlayed)
                )
                && (
                    UniqueMediaPlayed25Percent == other.UniqueMediaPlayed25Percent
                    || UniqueMediaPlayed25Percent != null
                        && UniqueMediaPlayed25Percent.Equals(other.UniqueMediaPlayed25Percent)
                )
                && (
                    UniqueMediaPlayed50Percent == other.UniqueMediaPlayed50Percent
                    || UniqueMediaPlayed50Percent != null
                        && UniqueMediaPlayed50Percent.Equals(other.UniqueMediaPlayed50Percent)
                )
                && (
                    UniqueMediaPlayed75Percent == other.UniqueMediaPlayed75Percent
                    || UniqueMediaPlayed75Percent != null
                        && UniqueMediaPlayed75Percent.Equals(other.UniqueMediaPlayed75Percent)
                )
                && (
                    UniqueMediaPlayed100Percent == other.UniqueMediaPlayed100Percent
                    || UniqueMediaPlayed100Percent != null
                        && UniqueMediaPlayed100Percent.Equals(other.UniqueMediaPlayed100Percent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)

                hashCode = hashCode * 59 + Seq.GetHashCode();
                if (Impression != null)
                    hashCode = hashCode * 59 + Impression.GetHashCode();
                if (MediaPlayed != null)
                    hashCode = hashCode * 59 + MediaPlayed.GetHashCode();
                if (MediaPlayed25Percent != null)
                    hashCode = hashCode * 59 + MediaPlayed25Percent.GetHashCode();
                if (MediaPlayed50Percent != null)
                    hashCode = hashCode * 59 + MediaPlayed50Percent.GetHashCode();
                if (MediaPlayed75Percent != null)
                    hashCode = hashCode * 59 + MediaPlayed75Percent.GetHashCode();
                if (MediaPlayed100Percent != null)
                    hashCode = hashCode * 59 + MediaPlayed100Percent.GetHashCode();
                if (UniqueMediaPlayed != null)
                    hashCode = hashCode * 59 + UniqueMediaPlayed.GetHashCode();
                if (UniqueMediaPlayed25Percent != null)
                    hashCode = hashCode * 59 + UniqueMediaPlayed25Percent.GetHashCode();
                if (UniqueMediaPlayed50Percent != null)
                    hashCode = hashCode * 59 + UniqueMediaPlayed50Percent.GetHashCode();
                if (UniqueMediaPlayed75Percent != null)
                    hashCode = hashCode * 59 + UniqueMediaPlayed75Percent.GetHashCode();
                if (UniqueMediaPlayed100Percent != null)
                    hashCode = hashCode * 59 + UniqueMediaPlayed100Percent.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(
            GetMessageEventResponseMessage left,
            GetMessageEventResponseMessage right
        )
        {
            return Equals(left, right);
        }

        public static bool operator !=(
            GetMessageEventResponseMessage left,
            GetMessageEventResponseMessage right
        )
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
