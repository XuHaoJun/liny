/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{
    /// <summary>
    /// Get friend demographics
    /// </summary>
    [DataContract]
    public partial class GetFriendsDemographicsResponse : IEquatable<GetFriendsDemographicsResponse>
    {
        /// <summary>
        /// true if friend demographic information is available.
        /// </summary>
        /// <value>true if friend demographic information is available.</value>
        [DataMember(Name = "available", EmitDefaultValue = true)]
        public bool Available { get; set; }

        /// <summary>
        /// Percentage per gender.
        /// </summary>
        /// <value>Percentage per gender.</value>
        [DataMember(Name = "genders", EmitDefaultValue = false)]
        public List<GenderTile> Genders { get; set; }

        /// <summary>
        /// Percentage per age group.
        /// </summary>
        /// <value>Percentage per age group.</value>
        [DataMember(Name = "ages", EmitDefaultValue = false)]
        public List<AgeTile> Ages { get; set; }

        /// <summary>
        /// Percentage per area.
        /// </summary>
        /// <value>Percentage per area.</value>
        [DataMember(Name = "areas", EmitDefaultValue = false)]
        public List<AreaTile> Areas { get; set; }

        /// <summary>
        /// Percentage by OS.
        /// </summary>
        /// <value>Percentage by OS.</value>
        [DataMember(Name = "appTypes", EmitDefaultValue = false)]
        public List<AppTypeTile> AppTypes { get; set; }

        /// <summary>
        /// Percentage per friendship duration.
        /// </summary>
        /// <value>Percentage per friendship duration.</value>
        [DataMember(Name = "subscriptionPeriods", EmitDefaultValue = false)]
        public List<SubscriptionPeriodTile> SubscriptionPeriods { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetFriendsDemographicsResponse {\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  Genders: ").Append(Genders).Append("\n");
            sb.Append("  Ages: ").Append(Ages).Append("\n");
            sb.Append("  Areas: ").Append(Areas).Append("\n");
            sb.Append("  AppTypes: ").Append(AppTypes).Append("\n");
            sb.Append("  SubscriptionPeriods: ").Append(SubscriptionPeriods).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions { WriteIndented = true };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((GetFriendsDemographicsResponse)obj);
        }

        /// <summary>
        /// Returns true if GetFriendsDemographicsResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of GetFriendsDemographicsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetFriendsDemographicsResponse other)
        {
            if (other is null)
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (Available == other.Available || Available.Equals(other.Available))
                && (
                    Genders == other.Genders
                    || Genders != null
                        && other.Genders != null
                        && Genders.SequenceEqual(other.Genders)
                )
                && (
                    Ages == other.Ages
                    || Ages != null && other.Ages != null && Ages.SequenceEqual(other.Ages)
                )
                && (
                    Areas == other.Areas
                    || Areas != null && other.Areas != null && Areas.SequenceEqual(other.Areas)
                )
                && (
                    AppTypes == other.AppTypes
                    || AppTypes != null
                        && other.AppTypes != null
                        && AppTypes.SequenceEqual(other.AppTypes)
                )
                && (
                    SubscriptionPeriods == other.SubscriptionPeriods
                    || SubscriptionPeriods != null
                        && other.SubscriptionPeriods != null
                        && SubscriptionPeriods.SequenceEqual(other.SubscriptionPeriods)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)

                hashCode = hashCode * 59 + Available.GetHashCode();
                if (Genders != null)
                    hashCode = hashCode * 59 + Genders.GetHashCode();
                if (Ages != null)
                    hashCode = hashCode * 59 + Ages.GetHashCode();
                if (Areas != null)
                    hashCode = hashCode * 59 + Areas.GetHashCode();
                if (AppTypes != null)
                    hashCode = hashCode * 59 + AppTypes.GetHashCode();
                if (SubscriptionPeriods != null)
                    hashCode = hashCode * 59 + SubscriptionPeriods.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(
            GetFriendsDemographicsResponse left,
            GetFriendsDemographicsResponse right
        )
        {
            return Equals(left, right);
        }

        public static bool operator !=(
            GetFriendsDemographicsResponse left,
            GetFriendsDemographicsResponse right
        )
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
