/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class StickerMessage : Message, IEquatable<StickerMessage>
    {
        /// <summary>
        /// Gets or Sets PackageId
        /// </summary>
        [Required]
        [DataMember(Name = "packageId", EmitDefaultValue = false)]
        public string PackageId { get; set; }

        /// <summary>
        /// Gets or Sets StickerId
        /// </summary>
        [Required]
        [DataMember(Name = "stickerId", EmitDefaultValue = false)]
        public string StickerId { get; set; }

        /// <summary>
        /// Quote token of the message you want to quote.
        /// </summary>
        /// <value>Quote token of the message you want to quote.</value>
        [DataMember(Name = "quoteToken", EmitDefaultValue = false)]
        public string QuoteToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StickerMessage {\n");
            sb.Append("  PackageId: ").Append(PackageId).Append("\n");
            sb.Append("  StickerId: ").Append(StickerId).Append("\n");
            sb.Append("  QuoteToken: ").Append(QuoteToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions { WriteIndented = true };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((StickerMessage)obj);
        }

        /// <summary>
        /// Returns true if StickerMessage instances are equal
        /// </summary>
        /// <param name="other">Instance of StickerMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StickerMessage other)
        {
            if (other is null)
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (
                    PackageId == other.PackageId
                    || PackageId != null && PackageId.Equals(other.PackageId)
                )
                && (
                    StickerId == other.StickerId
                    || StickerId != null && StickerId.Equals(other.StickerId)
                )
                && (
                    QuoteToken == other.QuoteToken
                    || QuoteToken != null && QuoteToken.Equals(other.QuoteToken)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (PackageId != null)
                    hashCode = hashCode * 59 + PackageId.GetHashCode();
                if (StickerId != null)
                    hashCode = hashCode * 59 + StickerId.GetHashCode();
                if (QuoteToken != null)
                    hashCode = hashCode * 59 + QuoteToken.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(StickerMessage left, StickerMessage right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StickerMessage left, StickerMessage right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
