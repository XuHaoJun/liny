/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{ 
    /// <summary>
    /// Statistics related to messages.
    /// </summary>
    [DataContract]
    public partial class GetStatisticsPerUnitResponseOverview : IEquatable<GetStatisticsPerUnitResponseOverview>
    {
        /// <summary>
        /// Number of users who opened the message, meaning they displayed at least 1 bubble.
        /// </summary>
        /// <value>Number of users who opened the message, meaning they displayed at least 1 bubble.</value>
        [DataMember(Name="uniqueImpression", EmitDefaultValue=true)]
        public long? UniqueImpression { get; set; }

        /// <summary>
        /// Number of users who opened any URL in the message.
        /// </summary>
        /// <value>Number of users who opened any URL in the message.</value>
        [DataMember(Name="uniqueClick", EmitDefaultValue=true)]
        public long? UniqueClick { get; set; }

        /// <summary>
        /// Number of users who started playing any video or audio in the message.
        /// </summary>
        /// <value>Number of users who started playing any video or audio in the message.</value>
        [DataMember(Name="uniqueMediaPlayed", EmitDefaultValue=true)]
        public long? UniqueMediaPlayed { get; set; }

        /// <summary>
        /// Number of users who played the entirety of any video or audio in the message.
        /// </summary>
        /// <value>Number of users who played the entirety of any video or audio in the message.</value>
        [DataMember(Name="uniqueMediaPlayed100Percent", EmitDefaultValue=true)]
        public long? UniqueMediaPlayed100Percent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetStatisticsPerUnitResponseOverview {\n");
            sb.Append("  UniqueImpression: ").Append(UniqueImpression).Append("\n");
            sb.Append("  UniqueClick: ").Append(UniqueClick).Append("\n");
            sb.Append("  UniqueMediaPlayed: ").Append(UniqueMediaPlayed).Append("\n");
            sb.Append("  UniqueMediaPlayed100Percent: ").Append(UniqueMediaPlayed100Percent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GetStatisticsPerUnitResponseOverview)obj);
        }

        /// <summary>
        /// Returns true if GetStatisticsPerUnitResponseOverview instances are equal
        /// </summary>
        /// <param name="other">Instance of GetStatisticsPerUnitResponseOverview to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetStatisticsPerUnitResponseOverview other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    UniqueImpression == other.UniqueImpression ||
                    UniqueImpression != null &&
                    UniqueImpression.Equals(other.UniqueImpression)
                ) && 
                (
                    UniqueClick == other.UniqueClick ||
                    UniqueClick != null &&
                    UniqueClick.Equals(other.UniqueClick)
                ) && 
                (
                    UniqueMediaPlayed == other.UniqueMediaPlayed ||
                    UniqueMediaPlayed != null &&
                    UniqueMediaPlayed.Equals(other.UniqueMediaPlayed)
                ) && 
                (
                    UniqueMediaPlayed100Percent == other.UniqueMediaPlayed100Percent ||
                    UniqueMediaPlayed100Percent != null &&
                    UniqueMediaPlayed100Percent.Equals(other.UniqueMediaPlayed100Percent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (UniqueImpression != null)
                    hashCode = hashCode * 59 + UniqueImpression.GetHashCode();
                    if (UniqueClick != null)
                    hashCode = hashCode * 59 + UniqueClick.GetHashCode();
                    if (UniqueMediaPlayed != null)
                    hashCode = hashCode * 59 + UniqueMediaPlayed.GetHashCode();
                    if (UniqueMediaPlayed100Percent != null)
                    hashCode = hashCode * 59 + UniqueMediaPlayed100Percent.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GetStatisticsPerUnitResponseOverview left, GetStatisticsPerUnitResponseOverview right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GetStatisticsPerUnitResponseOverview left, GetStatisticsPerUnitResponseOverview right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
