/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ScenarioResult : IEquatable<ScenarioResult>
    {
        /// <summary>
        /// Scenario ID executed
        /// </summary>
        /// <value>Scenario ID executed</value>
        [DataMember(Name="scenarioId", EmitDefaultValue=false)]
        public string ScenarioId { get; set; }

        /// <summary>
        /// Revision number of the scenario set containing the executed scenario
        /// </summary>
        /// <value>Revision number of the scenario set containing the executed scenario</value>
        [DataMember(Name="revision", EmitDefaultValue=true)]
        public int Revision { get; set; }

        /// <summary>
        /// Timestamp for when execution of scenario action started (milliseconds, LINE app time)
        /// </summary>
        /// <value>Timestamp for when execution of scenario action started (milliseconds, LINE app time)</value>
        [Required]
        [DataMember(Name="startTime", EmitDefaultValue=true)]
        public long StartTime { get; set; }

        /// <summary>
        /// Timestamp for when execution of scenario was completed (milliseconds, LINE app time)
        /// </summary>
        /// <value>Timestamp for when execution of scenario was completed (milliseconds, LINE app time)</value>
        [Required]
        [DataMember(Name="endTime", EmitDefaultValue=true)]
        public long EndTime { get; set; }

        /// <summary>
        /// Scenario execution completion status
        /// </summary>
        /// <value>Scenario execution completion status</value>
        [Required]
        [DataMember(Name="resultCode", EmitDefaultValue=false)]
        public string ResultCode { get; set; }

        /// <summary>
        /// Execution result of individual operations specified in action. Only included when things.result.resultCode is success.
        /// </summary>
        /// <value>Execution result of individual operations specified in action. Only included when things.result.resultCode is success.</value>
        [DataMember(Name="actionResults", EmitDefaultValue=false)]
        public List<ActionResult> ActionResults { get; set; }

        /// <summary>
        /// Data contained in notification.
        /// </summary>
        /// <value>Data contained in notification.</value>
        [DataMember(Name="bleNotificationPayload", EmitDefaultValue=false)]
        public string BleNotificationPayload { get; set; }

        /// <summary>
        /// Error reason.
        /// </summary>
        /// <value>Error reason.</value>
        [DataMember(Name="errorReason", EmitDefaultValue=false)]
        public string ErrorReason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScenarioResult {\n");
            sb.Append("  ScenarioId: ").Append(ScenarioId).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  ResultCode: ").Append(ResultCode).Append("\n");
            sb.Append("  ActionResults: ").Append(ActionResults).Append("\n");
            sb.Append("  BleNotificationPayload: ").Append(BleNotificationPayload).Append("\n");
            sb.Append("  ErrorReason: ").Append(ErrorReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ScenarioResult)obj);
        }

        /// <summary>
        /// Returns true if ScenarioResult instances are equal
        /// </summary>
        /// <param name="other">Instance of ScenarioResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScenarioResult other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ScenarioId == other.ScenarioId ||
                    ScenarioId != null &&
                    ScenarioId.Equals(other.ScenarioId)
                ) && 
                (
                    Revision == other.Revision ||
                    
                    Revision.Equals(other.Revision)
                ) && 
                (
                    StartTime == other.StartTime ||
                    
                    StartTime.Equals(other.StartTime)
                ) && 
                (
                    EndTime == other.EndTime ||
                    
                    EndTime.Equals(other.EndTime)
                ) && 
                (
                    ResultCode == other.ResultCode ||
                    ResultCode != null &&
                    ResultCode.Equals(other.ResultCode)
                ) && 
                (
                    ActionResults == other.ActionResults ||
                    ActionResults != null &&
                    other.ActionResults != null &&
                    ActionResults.SequenceEqual(other.ActionResults)
                ) && 
                (
                    BleNotificationPayload == other.BleNotificationPayload ||
                    BleNotificationPayload != null &&
                    BleNotificationPayload.Equals(other.BleNotificationPayload)
                ) && 
                (
                    ErrorReason == other.ErrorReason ||
                    ErrorReason != null &&
                    ErrorReason.Equals(other.ErrorReason)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ScenarioId != null)
                    hashCode = hashCode * 59 + ScenarioId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Revision.GetHashCode();
                    
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                    
                    hashCode = hashCode * 59 + EndTime.GetHashCode();
                    if (ResultCode != null)
                    hashCode = hashCode * 59 + ResultCode.GetHashCode();
                    if (ActionResults != null)
                    hashCode = hashCode * 59 + ActionResults.GetHashCode();
                    if (BleNotificationPayload != null)
                    hashCode = hashCode * 59 + BleNotificationPayload.GetHashCode();
                    if (ErrorReason != null)
                    hashCode = hashCode * 59 + ErrorReason.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ScenarioResult left, ScenarioResult right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ScenarioResult left, ScenarioResult right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
