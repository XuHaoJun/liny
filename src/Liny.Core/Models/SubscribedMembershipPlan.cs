/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{
    /// <summary>
    /// Object containing information about the membership plan.
    /// </summary>
    [DataContract]
    public partial class SubscribedMembershipPlan : IEquatable<SubscribedMembershipPlan>
    {
        /// <summary>
        /// Membership plan ID.
        /// </summary>
        /// <value>Membership plan ID.</value>
        [Required]
        [DataMember(Name = "membershipId", EmitDefaultValue = true)]
        public int MembershipId { get; set; }

        /// <summary>
        /// Membership plan name.
        /// </summary>
        /// <value>Membership plan name.</value>
        [Required]
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Membership plan description.
        /// </summary>
        /// <value>Membership plan description.</value>
        [Required]
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// List of membership plan perks.
        /// </summary>
        /// <value>List of membership plan perks.</value>
        [Required]
        [DataMember(Name = "benefits", EmitDefaultValue = false)]
        public List<string> Benefits { get; set; }

        /// <summary>
        /// Monthly fee for membership plan. (e.g. 1500.00)
        /// </summary>
        /// <value>Monthly fee for membership plan. (e.g. 1500.00)</value>
        /* <example>500.0</example> */
        [Required]
        [DataMember(Name = "price", EmitDefaultValue = true)]
        public double Price { get; set; }

        /// <summary>
        /// The currency of membership.price.
        /// </summary>
        /// <value>The currency of membership.price.</value>

        public enum CurrencyEnum
        {
            /// <summary>
            /// Enum JPYEnum for JPY
            /// </summary>
            [EnumMember(Value = "JPY")]
            JPYEnum = 1,

            /// <summary>
            /// Enum TWDEnum for TWD
            /// </summary>
            [EnumMember(Value = "TWD")]
            TWDEnum = 2,

            /// <summary>
            /// Enum THBEnum for THB
            /// </summary>
            [EnumMember(Value = "THB")]
            THBEnum = 3,
        }

        /// <summary>
        /// The currency of membership.price.
        /// </summary>
        /// <value>The currency of membership.price.</value>
        [Required]
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public CurrencyEnum Currency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscribedMembershipPlan {\n");
            sb.Append("  MembershipId: ").Append(MembershipId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Benefits: ").Append(Benefits).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions { WriteIndented = true };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((SubscribedMembershipPlan)obj);
        }

        /// <summary>
        /// Returns true if SubscribedMembershipPlan instances are equal
        /// </summary>
        /// <param name="other">Instance of SubscribedMembershipPlan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscribedMembershipPlan other)
        {
            if (other is null)
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (MembershipId == other.MembershipId || MembershipId.Equals(other.MembershipId))
                && (Title == other.Title || Title != null && Title.Equals(other.Title))
                && (
                    Description == other.Description
                    || Description != null && Description.Equals(other.Description)
                )
                && (
                    Benefits == other.Benefits
                    || Benefits != null
                        && other.Benefits != null
                        && Benefits.SequenceEqual(other.Benefits)
                )
                && (Price == other.Price || Price.Equals(other.Price))
                && (Currency == other.Currency || Currency.Equals(other.Currency));
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)

                hashCode = hashCode * 59 + MembershipId.GetHashCode();
                if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                if (Benefits != null)
                    hashCode = hashCode * 59 + Benefits.GetHashCode();

                hashCode = hashCode * 59 + Price.GetHashCode();

                hashCode = hashCode * 59 + Currency.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(
            SubscribedMembershipPlan left,
            SubscribedMembershipPlan right
        )
        {
            return Equals(left, right);
        }

        public static bool operator !=(
            SubscribedMembershipPlan left,
            SubscribedMembershipPlan right
        )
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
