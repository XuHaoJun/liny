/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{
    /// <summary>
    /// Create audience for uploading user IDs (by JSON)
    /// </summary>
    [DataContract]
    public partial class CreateAudienceGroupResponse : IEquatable<CreateAudienceGroupResponse>
    {
        /// <summary>
        /// The audience ID.
        /// </summary>
        /// <value>The audience ID.</value>
        [DataMember(Name = "audienceGroupId", EmitDefaultValue = true)]
        public long AudienceGroupId { get; set; }

        /// <summary>
        /// How the audience was created.  `MESSAGING_API`: An audience created with Messaging API.
        /// </summary>
        /// <value>How the audience was created.  `MESSAGING_API`: An audience created with Messaging API. </value>

        public enum CreateRouteEnum
        {
            /// <summary>
            /// Enum MESSAGINGAPIEnum for MESSAGING_API
            /// </summary>
            [EnumMember(Value = "MESSAGING_API")]
            MESSAGINGAPIEnum = 1,
        }

        /// <summary>
        /// How the audience was created.  &#x60;MESSAGING_API&#x60;: An audience created with Messaging API.
        /// </summary>
        /// <value>How the audience was created.  &#x60;MESSAGING_API&#x60;: An audience created with Messaging API. </value>
        [DataMember(Name = "createRoute", EmitDefaultValue = true)]
        public CreateRouteEnum CreateRoute { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public AudienceGroupType Type { get; set; }

        /// <summary>
        /// The audience&#39;s name.
        /// </summary>
        /// <value>The audience&#39;s name.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// When the audience was created (in UNIX time).
        /// </summary>
        /// <value>When the audience was created (in UNIX time).</value>
        [DataMember(Name = "created", EmitDefaultValue = true)]
        public long Created { get; set; }

        /// <summary>
        /// Audience's update permission. Audiences linked to the same channel will be READ_WRITE.  `READ`: Can use only. `READ_WRITE`: Can use and update.
        /// </summary>
        /// <value>Audience's update permission. Audiences linked to the same channel will be READ_WRITE.  `READ`: Can use only. `READ_WRITE`: Can use and update. </value>

        public enum PermissionEnum
        {
            /// <summary>
            /// Enum READEnum for READ
            /// </summary>
            [EnumMember(Value = "READ")]
            READEnum = 1,

            /// <summary>
            /// Enum READWRITEEnum for READ_WRITE
            /// </summary>
            [EnumMember(Value = "READ_WRITE")]
            READWRITEEnum = 2,
        }

        /// <summary>
        /// Audience&#39;s update permission. Audiences linked to the same channel will be READ_WRITE.  &#x60;READ&#x60;: Can use only. &#x60;READ_WRITE&#x60;: Can use and update.
        /// </summary>
        /// <value>Audience&#39;s update permission. Audiences linked to the same channel will be READ_WRITE.  &#x60;READ&#x60;: Can use only. &#x60;READ_WRITE&#x60;: Can use and update. </value>
        [DataMember(Name = "permission", EmitDefaultValue = true)]
        public PermissionEnum Permission { get; set; }

        /// <summary>
        /// Time of audience expiration. Only returned for specific audiences.
        /// </summary>
        /// <value>Time of audience expiration. Only returned for specific audiences. </value>
        [DataMember(Name = "expireTimestamp", EmitDefaultValue = true)]
        public decimal ExpireTimestamp { get; set; }

        /// <summary>
        /// The value indicating the type of account to be sent, as specified when creating the audience for uploading user IDs. One of:  &#x60;true&#x60;: Accounts are specified with IFAs. &#x60;false&#x60; (default): Accounts are specified with user IDs.
        /// </summary>
        /// <value>The value indicating the type of account to be sent, as specified when creating the audience for uploading user IDs. One of:  &#x60;true&#x60;: Accounts are specified with IFAs. &#x60;false&#x60; (default): Accounts are specified with user IDs. </value>
        [DataMember(Name = "isIfaAudience", EmitDefaultValue = true)]
        public bool IsIfaAudience { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateAudienceGroupResponse {\n");
            sb.Append("  AudienceGroupId: ").Append(AudienceGroupId).Append("\n");
            sb.Append("  CreateRoute: ").Append(CreateRoute).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Permission: ").Append(Permission).Append("\n");
            sb.Append("  ExpireTimestamp: ").Append(ExpireTimestamp).Append("\n");
            sb.Append("  IsIfaAudience: ").Append(IsIfaAudience).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions { WriteIndented = true };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((CreateAudienceGroupResponse)obj);
        }

        /// <summary>
        /// Returns true if CreateAudienceGroupResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateAudienceGroupResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateAudienceGroupResponse other)
        {
            if (other is null)
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (
                    AudienceGroupId == other.AudienceGroupId
                    || AudienceGroupId.Equals(other.AudienceGroupId)
                )
                && (CreateRoute == other.CreateRoute || CreateRoute.Equals(other.CreateRoute))
                && (Type == other.Type || Type.Equals(other.Type))
                && (
                    Description == other.Description
                    || Description != null && Description.Equals(other.Description)
                )
                && (Created == other.Created || Created.Equals(other.Created))
                && (Permission == other.Permission || Permission.Equals(other.Permission))
                && (
                    ExpireTimestamp == other.ExpireTimestamp
                    || ExpireTimestamp.Equals(other.ExpireTimestamp)
                )
                && (
                    IsIfaAudience == other.IsIfaAudience
                    || IsIfaAudience.Equals(other.IsIfaAudience)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)

                hashCode = hashCode * 59 + AudienceGroupId.GetHashCode();

                hashCode = hashCode * 59 + CreateRoute.GetHashCode();

                hashCode = hashCode * 59 + Type.GetHashCode();
                if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();

                hashCode = hashCode * 59 + Created.GetHashCode();

                hashCode = hashCode * 59 + Permission.GetHashCode();

                hashCode = hashCode * 59 + ExpireTimestamp.GetHashCode();

                hashCode = hashCode * 59 + IsIfaAudience.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(
            CreateAudienceGroupResponse left,
            CreateAudienceGroupResponse right
        )
        {
            return Equals(left, right);
        }

        public static bool operator !=(
            CreateAudienceGroupResponse left,
            CreateAudienceGroupResponse right
        )
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
