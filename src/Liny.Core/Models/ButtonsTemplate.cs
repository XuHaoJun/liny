/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ButtonsTemplate : Template, IEquatable<ButtonsTemplate>
    {
        /// <summary>
        /// Gets or Sets ThumbnailImageUrl
        /// </summary>
        [DataMember(Name="thumbnailImageUrl", EmitDefaultValue=false)]
        public string ThumbnailImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets ImageAspectRatio
        /// </summary>
        [DataMember(Name="imageAspectRatio", EmitDefaultValue=false)]
        public string ImageAspectRatio { get; set; }

        /// <summary>
        /// Gets or Sets ImageSize
        /// </summary>
        [DataMember(Name="imageSize", EmitDefaultValue=false)]
        public string ImageSize { get; set; }

        /// <summary>
        /// Gets or Sets ImageBackgroundColor
        /// </summary>
        [DataMember(Name="imageBackgroundColor", EmitDefaultValue=false)]
        public string ImageBackgroundColor { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [Required]
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets DefaultAction
        /// </summary>
        [DataMember(Name="defaultAction", EmitDefaultValue=false)]
        public Action DefaultAction { get; set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [Required]
        [DataMember(Name="actions", EmitDefaultValue=false)]
        public List<Action> Actions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ButtonsTemplate {\n");
            sb.Append("  ThumbnailImageUrl: ").Append(ThumbnailImageUrl).Append("\n");
            sb.Append("  ImageAspectRatio: ").Append(ImageAspectRatio).Append("\n");
            sb.Append("  ImageSize: ").Append(ImageSize).Append("\n");
            sb.Append("  ImageBackgroundColor: ").Append(ImageBackgroundColor).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  DefaultAction: ").Append(DefaultAction).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ButtonsTemplate)obj);
        }

        /// <summary>
        /// Returns true if ButtonsTemplate instances are equal
        /// </summary>
        /// <param name="other">Instance of ButtonsTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ButtonsTemplate other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ThumbnailImageUrl == other.ThumbnailImageUrl ||
                    ThumbnailImageUrl != null &&
                    ThumbnailImageUrl.Equals(other.ThumbnailImageUrl)
                ) && 
                (
                    ImageAspectRatio == other.ImageAspectRatio ||
                    ImageAspectRatio != null &&
                    ImageAspectRatio.Equals(other.ImageAspectRatio)
                ) && 
                (
                    ImageSize == other.ImageSize ||
                    ImageSize != null &&
                    ImageSize.Equals(other.ImageSize)
                ) && 
                (
                    ImageBackgroundColor == other.ImageBackgroundColor ||
                    ImageBackgroundColor != null &&
                    ImageBackgroundColor.Equals(other.ImageBackgroundColor)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.Equals(other.Text)
                ) && 
                (
                    DefaultAction == other.DefaultAction ||
                    DefaultAction != null &&
                    DefaultAction.Equals(other.DefaultAction)
                ) && 
                (
                    Actions == other.Actions ||
                    Actions != null &&
                    other.Actions != null &&
                    Actions.SequenceEqual(other.Actions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ThumbnailImageUrl != null)
                    hashCode = hashCode * 59 + ThumbnailImageUrl.GetHashCode();
                    if (ImageAspectRatio != null)
                    hashCode = hashCode * 59 + ImageAspectRatio.GetHashCode();
                    if (ImageSize != null)
                    hashCode = hashCode * 59 + ImageSize.GetHashCode();
                    if (ImageBackgroundColor != null)
                    hashCode = hashCode * 59 + ImageBackgroundColor.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    if (DefaultAction != null)
                    hashCode = hashCode * 59 + DefaultAction.GetHashCode();
                    if (Actions != null)
                    hashCode = hashCode * 59 + Actions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ButtonsTemplate left, ButtonsTemplate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ButtonsTemplate left, ButtonsTemplate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
