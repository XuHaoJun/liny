/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FlexBoxLinearGradient : FlexBoxBackground, IEquatable<FlexBoxLinearGradient>
    {
        /// <summary>
        /// Gets or Sets Angle
        /// </summary>
        [DataMember(Name="angle", EmitDefaultValue=false)]
        public string Angle { get; set; }

        /// <summary>
        /// Gets or Sets StartColor
        /// </summary>
        [DataMember(Name="startColor", EmitDefaultValue=false)]
        public string StartColor { get; set; }

        /// <summary>
        /// Gets or Sets EndColor
        /// </summary>
        [DataMember(Name="endColor", EmitDefaultValue=false)]
        public string EndColor { get; set; }

        /// <summary>
        /// Gets or Sets CenterColor
        /// </summary>
        [DataMember(Name="centerColor", EmitDefaultValue=false)]
        public string CenterColor { get; set; }

        /// <summary>
        /// Gets or Sets CenterPosition
        /// </summary>
        [DataMember(Name="centerPosition", EmitDefaultValue=false)]
        public string CenterPosition { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlexBoxLinearGradient {\n");
            sb.Append("  Angle: ").Append(Angle).Append("\n");
            sb.Append("  StartColor: ").Append(StartColor).Append("\n");
            sb.Append("  EndColor: ").Append(EndColor).Append("\n");
            sb.Append("  CenterColor: ").Append(CenterColor).Append("\n");
            sb.Append("  CenterPosition: ").Append(CenterPosition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FlexBoxLinearGradient)obj);
        }

        /// <summary>
        /// Returns true if FlexBoxLinearGradient instances are equal
        /// </summary>
        /// <param name="other">Instance of FlexBoxLinearGradient to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlexBoxLinearGradient other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Angle == other.Angle ||
                    Angle != null &&
                    Angle.Equals(other.Angle)
                ) && 
                (
                    StartColor == other.StartColor ||
                    StartColor != null &&
                    StartColor.Equals(other.StartColor)
                ) && 
                (
                    EndColor == other.EndColor ||
                    EndColor != null &&
                    EndColor.Equals(other.EndColor)
                ) && 
                (
                    CenterColor == other.CenterColor ||
                    CenterColor != null &&
                    CenterColor.Equals(other.CenterColor)
                ) && 
                (
                    CenterPosition == other.CenterPosition ||
                    CenterPosition != null &&
                    CenterPosition.Equals(other.CenterPosition)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Angle != null)
                    hashCode = hashCode * 59 + Angle.GetHashCode();
                    if (StartColor != null)
                    hashCode = hashCode * 59 + StartColor.GetHashCode();
                    if (EndColor != null)
                    hashCode = hashCode * 59 + EndColor.GetHashCode();
                    if (CenterColor != null)
                    hashCode = hashCode * 59 + CenterColor.GetHashCode();
                    if (CenterPosition != null)
                    hashCode = hashCode * 59 + CenterPosition.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FlexBoxLinearGradient left, FlexBoxLinearGradient right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FlexBoxLinearGradient left, FlexBoxLinearGradient right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
