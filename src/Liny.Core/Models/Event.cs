/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using JsonSubTypes;
using Liny.Core.Converters;
using Swashbuckle.AspNetCore.Annotations;

namespace Liny.Core.Models
{
    /// <summary>
    /// Webhook event
    /// </summary>
    [DataContract]
    [SwaggerDiscriminator("Type")]
    [JsonSubtypes.KnownSubType(typeof(AccountLinkEvent), "accountLink")]
    [SwaggerSubType(typeof(AccountLinkEvent), DiscriminatorValue = "accountLink")]
    [JsonSubtypes.KnownSubType(typeof(ActivatedEvent), "activated")]
    [SwaggerSubType(typeof(ActivatedEvent), DiscriminatorValue = "activated")]
    [JsonSubtypes.KnownSubType(typeof(BeaconEvent), "beacon")]
    [SwaggerSubType(typeof(BeaconEvent), DiscriminatorValue = "beacon")]
    [JsonSubtypes.KnownSubType(typeof(BotResumedEvent), "botResumed")]
    [SwaggerSubType(typeof(BotResumedEvent), DiscriminatorValue = "botResumed")]
    [JsonSubtypes.KnownSubType(typeof(BotSuspendedEvent), "botSuspended")]
    [SwaggerSubType(typeof(BotSuspendedEvent), DiscriminatorValue = "botSuspended")]
    [JsonSubtypes.KnownSubType(typeof(DeactivatedEvent), "deactivated")]
    [SwaggerSubType(typeof(DeactivatedEvent), DiscriminatorValue = "deactivated")]
    [JsonSubtypes.KnownSubType(typeof(PnpDeliveryCompletionEvent), "delivery")]
    [SwaggerSubType(typeof(PnpDeliveryCompletionEvent), DiscriminatorValue = "delivery")]
    [JsonSubtypes.KnownSubType(typeof(FollowEvent), "follow")]
    [SwaggerSubType(typeof(FollowEvent), DiscriminatorValue = "follow")]
    [JsonSubtypes.KnownSubType(typeof(JoinEvent), "join")]
    [SwaggerSubType(typeof(JoinEvent), DiscriminatorValue = "join")]
    [JsonSubtypes.KnownSubType(typeof(LeaveEvent), "leave")]
    [SwaggerSubType(typeof(LeaveEvent), DiscriminatorValue = "leave")]
    [JsonSubtypes.KnownSubType(typeof(MemberJoinedEvent), "memberJoined")]
    [SwaggerSubType(typeof(MemberJoinedEvent), DiscriminatorValue = "memberJoined")]
    [JsonSubtypes.KnownSubType(typeof(MemberLeftEvent), "memberLeft")]
    [SwaggerSubType(typeof(MemberLeftEvent), DiscriminatorValue = "memberLeft")]
    [JsonSubtypes.KnownSubType(typeof(MessageEvent), "message")]
    [SwaggerSubType(typeof(MessageEvent), DiscriminatorValue = "message")]
    [JsonSubtypes.KnownSubType(typeof(ModuleEvent), "module")]
    [SwaggerSubType(typeof(ModuleEvent), DiscriminatorValue = "module")]
    [JsonSubtypes.KnownSubType(typeof(PostbackEvent), "postback")]
    [SwaggerSubType(typeof(PostbackEvent), DiscriminatorValue = "postback")]
    [JsonSubtypes.KnownSubType(typeof(ThingsEvent), "things")]
    [SwaggerSubType(typeof(ThingsEvent), DiscriminatorValue = "things")]
    [JsonSubtypes.KnownSubType(typeof(UnfollowEvent), "unfollow")]
    [SwaggerSubType(typeof(UnfollowEvent), DiscriminatorValue = "unfollow")]
    [JsonSubtypes.KnownSubType(typeof(UnsendEvent), "unsend")]
    [SwaggerSubType(typeof(UnsendEvent), DiscriminatorValue = "unsend")]
    [JsonSubtypes.KnownSubType(typeof(VideoPlayCompleteEvent), "videoPlayComplete")]
    [SwaggerSubType(typeof(VideoPlayCompleteEvent), DiscriminatorValue = "videoPlayComplete")]
    public partial class Event : IEquatable<Event>
    {
        /// <summary>
        /// Type of the event
        /// </summary>
        /// <value>Type of the event</value>
        [Required]
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public Source Source { get; set; }

        /// <summary>
        /// Time of the event in milliseconds.
        /// </summary>
        /// <value>Time of the event in milliseconds.</value>
        [Required]
        [DataMember(Name = "timestamp", EmitDefaultValue = true)]
        public long Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [Required]
        [DataMember(Name = "mode", EmitDefaultValue = true)]
        public EventMode Mode { get; set; }

        /// <summary>
        /// Webhook Event ID. An ID that uniquely identifies a webhook event. This is a string in ULID format.
        /// </summary>
        /// <value>Webhook Event ID. An ID that uniquely identifies a webhook event. This is a string in ULID format.</value>
        [Required]
        [DataMember(Name = "webhookEventId", EmitDefaultValue = false)]
        public string WebhookEventId { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryContext
        /// </summary>
        [Required]
        [DataMember(Name = "deliveryContext", EmitDefaultValue = false)]
        public DeliveryContext DeliveryContext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Event {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  WebhookEventId: ").Append(WebhookEventId).Append("\n");
            sb.Append("  DeliveryContext: ").Append(DeliveryContext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions { WriteIndented = true };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((Event)obj);
        }

        /// <summary>
        /// Returns true if Event instances are equal
        /// </summary>
        /// <param name="other">Instance of Event to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Event other)
        {
            if (other is null)
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (Type == other.Type || Type != null && Type.Equals(other.Type))
                && (Source == other.Source || Source != null && Source.Equals(other.Source))
                && (Timestamp == other.Timestamp || Timestamp.Equals(other.Timestamp))
                && (Mode == other.Mode || Mode.Equals(other.Mode))
                && (
                    WebhookEventId == other.WebhookEventId
                    || WebhookEventId != null && WebhookEventId.Equals(other.WebhookEventId)
                )
                && (
                    DeliveryContext == other.DeliveryContext
                    || DeliveryContext != null && DeliveryContext.Equals(other.DeliveryContext)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                if (Source != null)
                    hashCode = hashCode * 59 + Source.GetHashCode();

                hashCode = hashCode * 59 + Timestamp.GetHashCode();

                hashCode = hashCode * 59 + Mode.GetHashCode();
                if (WebhookEventId != null)
                    hashCode = hashCode * 59 + WebhookEventId.GetHashCode();
                if (DeliveryContext != null)
                    hashCode = hashCode * 59 + DeliveryContext.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Event left, Event right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Event left, Event right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
