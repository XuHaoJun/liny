/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class FlexVideo : FlexComponent, IEquatable<FlexVideo>
    {
        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [Required]
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets PreviewUrl
        /// </summary>
        [Required]
        [DataMember(Name = "previewUrl", EmitDefaultValue = false)]
        public string PreviewUrl { get; set; }

        /// <summary>
        /// Gets or Sets AltContent
        /// </summary>
        [Required]
        [DataMember(Name = "altContent", EmitDefaultValue = false)]
        public FlexComponent AltContent { get; set; }

        /// <summary>
        /// Gets or Sets AspectRatio
        /// </summary>
        [DataMember(Name = "aspectRatio", EmitDefaultValue = false)]
        public string AspectRatio { get; set; }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        public Action Action { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlexVideo {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  PreviewUrl: ").Append(PreviewUrl).Append("\n");
            sb.Append("  AltContent: ").Append(AltContent).Append("\n");
            sb.Append("  AspectRatio: ").Append(AspectRatio).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions { WriteIndented = true };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((FlexVideo)obj);
        }

        /// <summary>
        /// Returns true if FlexVideo instances are equal
        /// </summary>
        /// <param name="other">Instance of FlexVideo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlexVideo other)
        {
            if (other is null)
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (Url == other.Url || Url != null && Url.Equals(other.Url))
                && (
                    PreviewUrl == other.PreviewUrl
                    || PreviewUrl != null && PreviewUrl.Equals(other.PreviewUrl)
                )
                && (
                    AltContent == other.AltContent
                    || AltContent != null && AltContent.Equals(other.AltContent)
                )
                && (
                    AspectRatio == other.AspectRatio
                    || AspectRatio != null && AspectRatio.Equals(other.AspectRatio)
                )
                && (Action == other.Action || Action != null && Action.Equals(other.Action));
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                if (PreviewUrl != null)
                    hashCode = hashCode * 59 + PreviewUrl.GetHashCode();
                if (AltContent != null)
                    hashCode = hashCode * 59 + AltContent.GetHashCode();
                if (AspectRatio != null)
                    hashCode = hashCode * 59 + AspectRatio.GetHashCode();
                if (Action != null)
                    hashCode = hashCode * 59 + Action.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(FlexVideo left, FlexVideo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FlexVideo left, FlexVideo right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
