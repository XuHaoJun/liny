/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{ 
    /// <summary>
    /// This event indicates that the module channel has been attached to the LINE Official Account. Sent to the webhook URL server of the module channel.
    /// </summary>
    [DataContract]
    public partial class ModuleEvent : Event, IEquatable<ModuleEvent>
    {
        /// <summary>
        /// Gets or Sets Module
        /// </summary>
        [Required]
        [DataMember(Name="module", EmitDefaultValue=false)]
        public ModuleContent Module { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModuleEvent {\n");
            sb.Append("  Module: ").Append(Module).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public new string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ModuleEvent)obj);
        }

        /// <summary>
        /// Returns true if ModuleEvent instances are equal
        /// </summary>
        /// <param name="other">Instance of ModuleEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModuleEvent other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Module == other.Module ||
                    Module != null &&
                    Module.Equals(other.Module)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Module != null)
                    hashCode = hashCode * 59 + Module.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ModuleEvent left, ModuleEvent right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ModuleEvent left, ModuleEvent right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
