/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{
    /// <summary>
    /// Get number of message deliveries
    /// </summary>
    [DataContract]
    public partial class GetNumberOfMessageDeliveriesResponse
        : IEquatable<GetNumberOfMessageDeliveriesResponse>
    {
        /// <summary>
        /// Status of the counting process.
        /// </summary>
        /// <value>Status of the counting process.</value>

        public enum StatusEnum
        {
            /// <summary>
            /// Enum ReadyEnum for ready
            /// </summary>
            [EnumMember(Value = "ready")]
            ReadyEnum = 1,

            /// <summary>
            /// Enum UnreadyEnum for unready
            /// </summary>
            [EnumMember(Value = "unready")]
            UnreadyEnum = 2,

            /// <summary>
            /// Enum OutOfServiceEnum for out_of_service
            /// </summary>
            [EnumMember(Value = "out_of_service")]
            OutOfServiceEnum = 3,
        }

        /// <summary>
        /// Status of the counting process.
        /// </summary>
        /// <value>Status of the counting process.</value>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Number of messages sent to all of this LINE Official Account&#39;s friends (broadcast messages).
        /// </summary>
        /// <value>Number of messages sent to all of this LINE Official Account&#39;s friends (broadcast messages).</value>
        [DataMember(Name = "broadcast", EmitDefaultValue = true)]
        public long Broadcast { get; set; }

        /// <summary>
        /// Number of messages sent to some of this LINE Official Account&#39;s friends, based on specific attributes (targeted messages).
        /// </summary>
        /// <value>Number of messages sent to some of this LINE Official Account&#39;s friends, based on specific attributes (targeted messages).</value>
        [DataMember(Name = "targeting", EmitDefaultValue = true)]
        public long Targeting { get; set; }

        /// <summary>
        /// Number of auto-response messages sent.
        /// </summary>
        /// <value>Number of auto-response messages sent.</value>
        [DataMember(Name = "autoResponse", EmitDefaultValue = true)]
        public long AutoResponse { get; set; }

        /// <summary>
        /// Number of greeting messages sent.
        /// </summary>
        /// <value>Number of greeting messages sent.</value>
        [DataMember(Name = "welcomeResponse", EmitDefaultValue = true)]
        public long WelcomeResponse { get; set; }

        /// <summary>
        /// Number of messages sent from LINE Official Account Manager [Chat screen](https://www.linebiz.com/jp/manual/OfficialAccountManager/chats/) (only available in Japanese).
        /// </summary>
        /// <value>Number of messages sent from LINE Official Account Manager [Chat screen](https://www.linebiz.com/jp/manual/OfficialAccountManager/chats/) (only available in Japanese).</value>
        [DataMember(Name = "chat", EmitDefaultValue = true)]
        public long Chat { get; set; }

        /// <summary>
        /// Number of broadcast messages sent with the &#x60;Send broadcast message&#x60; Messaging API operation.
        /// </summary>
        /// <value>Number of broadcast messages sent with the &#x60;Send broadcast message&#x60; Messaging API operation.</value>
        [DataMember(Name = "apiBroadcast", EmitDefaultValue = true)]
        public long ApiBroadcast { get; set; }

        /// <summary>
        /// Number of push messages sent with the &#x60;Send push message&#x60; Messaging API operation.
        /// </summary>
        /// <value>Number of push messages sent with the &#x60;Send push message&#x60; Messaging API operation.</value>
        [DataMember(Name = "apiPush", EmitDefaultValue = true)]
        public long ApiPush { get; set; }

        /// <summary>
        /// Number of multicast messages sent with the &#x60;Send multicast message&#x60; Messaging API operation.
        /// </summary>
        /// <value>Number of multicast messages sent with the &#x60;Send multicast message&#x60; Messaging API operation.</value>
        [DataMember(Name = "apiMulticast", EmitDefaultValue = true)]
        public long ApiMulticast { get; set; }

        /// <summary>
        /// Number of narrowcast messages sent with the &#x60;Send narrowcast message&#x60; Messaging API operation.
        /// </summary>
        /// <value>Number of narrowcast messages sent with the &#x60;Send narrowcast message&#x60; Messaging API operation.</value>
        [DataMember(Name = "apiNarrowcast", EmitDefaultValue = true)]
        public long ApiNarrowcast { get; set; }

        /// <summary>
        /// Number of replies sent with the &#x60;Send reply message&#x60; Messaging API operation.
        /// </summary>
        /// <value>Number of replies sent with the &#x60;Send reply message&#x60; Messaging API operation.</value>
        [DataMember(Name = "apiReply", EmitDefaultValue = true)]
        public long ApiReply { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetNumberOfMessageDeliveriesResponse {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Broadcast: ").Append(Broadcast).Append("\n");
            sb.Append("  Targeting: ").Append(Targeting).Append("\n");
            sb.Append("  AutoResponse: ").Append(AutoResponse).Append("\n");
            sb.Append("  WelcomeResponse: ").Append(WelcomeResponse).Append("\n");
            sb.Append("  Chat: ").Append(Chat).Append("\n");
            sb.Append("  ApiBroadcast: ").Append(ApiBroadcast).Append("\n");
            sb.Append("  ApiPush: ").Append(ApiPush).Append("\n");
            sb.Append("  ApiMulticast: ").Append(ApiMulticast).Append("\n");
            sb.Append("  ApiNarrowcast: ").Append(ApiNarrowcast).Append("\n");
            sb.Append("  ApiReply: ").Append(ApiReply).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions { WriteIndented = true };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((GetNumberOfMessageDeliveriesResponse)obj);
        }

        /// <summary>
        /// Returns true if GetNumberOfMessageDeliveriesResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of GetNumberOfMessageDeliveriesResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetNumberOfMessageDeliveriesResponse other)
        {
            if (other is null)
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (Status == other.Status || Status.Equals(other.Status))
                && (Broadcast == other.Broadcast || Broadcast.Equals(other.Broadcast))
                && (Targeting == other.Targeting || Targeting.Equals(other.Targeting))
                && (AutoResponse == other.AutoResponse || AutoResponse.Equals(other.AutoResponse))
                && (
                    WelcomeResponse == other.WelcomeResponse
                    || WelcomeResponse.Equals(other.WelcomeResponse)
                )
                && (Chat == other.Chat || Chat.Equals(other.Chat))
                && (ApiBroadcast == other.ApiBroadcast || ApiBroadcast.Equals(other.ApiBroadcast))
                && (ApiPush == other.ApiPush || ApiPush.Equals(other.ApiPush))
                && (ApiMulticast == other.ApiMulticast || ApiMulticast.Equals(other.ApiMulticast))
                && (
                    ApiNarrowcast == other.ApiNarrowcast
                    || ApiNarrowcast.Equals(other.ApiNarrowcast)
                )
                && (ApiReply == other.ApiReply || ApiReply.Equals(other.ApiReply));
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)

                hashCode = hashCode * 59 + Status.GetHashCode();

                hashCode = hashCode * 59 + Broadcast.GetHashCode();

                hashCode = hashCode * 59 + Targeting.GetHashCode();

                hashCode = hashCode * 59 + AutoResponse.GetHashCode();

                hashCode = hashCode * 59 + WelcomeResponse.GetHashCode();

                hashCode = hashCode * 59 + Chat.GetHashCode();

                hashCode = hashCode * 59 + ApiBroadcast.GetHashCode();

                hashCode = hashCode * 59 + ApiPush.GetHashCode();

                hashCode = hashCode * 59 + ApiMulticast.GetHashCode();

                hashCode = hashCode * 59 + ApiNarrowcast.GetHashCode();

                hashCode = hashCode * 59 + ApiReply.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(
            GetNumberOfMessageDeliveriesResponse left,
            GetNumberOfMessageDeliveriesResponse right
        )
        {
            return Equals(left, right);
        }

        public static bool operator !=(
            GetNumberOfMessageDeliveriesResponse left,
            GetNumberOfMessageDeliveriesResponse right
        )
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
