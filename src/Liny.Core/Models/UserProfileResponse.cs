/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UserProfileResponse : IEquatable<UserProfileResponse>
    {
        /// <summary>
        /// User&#39;s display name
        /// </summary>
        /// <value>User&#39;s display name</value>
        [Required]
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// User ID
        /// </summary>
        /// <value>User ID</value>
        [Required]
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// Profile image URL. &#x60;https&#x60; image URL. Not included in the response if the user doesn&#39;t have a profile image.
        /// </summary>
        /// <value>Profile image URL. &#x60;https&#x60; image URL. Not included in the response if the user doesn&#39;t have a profile image.</value>
        [DataMember(Name="pictureUrl", EmitDefaultValue=false)]
        public string PictureUrl { get; set; }

        /// <summary>
        /// User&#39;s status message. Not included in the response if the user doesn&#39;t have a status message.
        /// </summary>
        /// <value>User&#39;s status message. Not included in the response if the user doesn&#39;t have a status message.</value>
        [DataMember(Name="statusMessage", EmitDefaultValue=false)]
        public string StatusMessage { get; set; }

        /// <summary>
        /// User&#39;s language, as a BCP 47 language tag. Not included in the response if the user hasn&#39;t yet consented to the LINE Privacy Policy.
        /// </summary>
        /// <value>User&#39;s language, as a BCP 47 language tag. Not included in the response if the user hasn&#39;t yet consented to the LINE Privacy Policy.</value>
        /* <example>en</example> */
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserProfileResponse {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  PictureUrl: ").Append(PictureUrl).Append("\n");
            sb.Append("  StatusMessage: ").Append(StatusMessage).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UserProfileResponse)obj);
        }

        /// <summary>
        /// Returns true if UserProfileResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of UserProfileResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserProfileResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DisplayName == other.DisplayName ||
                    DisplayName != null &&
                    DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                ) && 
                (
                    PictureUrl == other.PictureUrl ||
                    PictureUrl != null &&
                    PictureUrl.Equals(other.PictureUrl)
                ) && 
                (
                    StatusMessage == other.StatusMessage ||
                    StatusMessage != null &&
                    StatusMessage.Equals(other.StatusMessage)
                ) && 
                (
                    Language == other.Language ||
                    Language != null &&
                    Language.Equals(other.Language)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DisplayName != null)
                    hashCode = hashCode * 59 + DisplayName.GetHashCode();
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (PictureUrl != null)
                    hashCode = hashCode * 59 + PictureUrl.GetHashCode();
                    if (StatusMessage != null)
                    hashCode = hashCode * 59 + StatusMessage.GetHashCode();
                    if (Language != null)
                    hashCode = hashCode * 59 + Language.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UserProfileResponse left, UserProfileResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserProfileResponse left, UserProfileResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
