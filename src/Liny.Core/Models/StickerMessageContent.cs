/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class StickerMessageContent : MessageContent, IEquatable<StickerMessageContent>
    {
        /// <summary>
        /// Package ID
        /// </summary>
        /// <value>Package ID</value>
        [Required]
        [DataMember(Name = "packageId", EmitDefaultValue = false)]
        public string PackageId { get; set; }

        /// <summary>
        /// Sticker ID
        /// </summary>
        /// <value>Sticker ID</value>
        [Required]
        [DataMember(Name = "stickerId", EmitDefaultValue = false)]
        public string StickerId { get; set; }

        /// <summary>
        /// Gets or Sets StickerResourceType
        /// </summary>

        public enum StickerResourceTypeEnum
        {
            /// <summary>
            /// Enum STATICEnum for STATIC
            /// </summary>
            [EnumMember(Value = "STATIC")]
            STATICEnum = 1,

            /// <summary>
            /// Enum ANIMATIONEnum for ANIMATION
            /// </summary>
            [EnumMember(Value = "ANIMATION")]
            ANIMATIONEnum = 2,

            /// <summary>
            /// Enum SOUNDEnum for SOUND
            /// </summary>
            [EnumMember(Value = "SOUND")]
            SOUNDEnum = 3,

            /// <summary>
            /// Enum ANIMATIONSOUNDEnum for ANIMATION_SOUND
            /// </summary>
            [EnumMember(Value = "ANIMATION_SOUND")]
            ANIMATIONSOUNDEnum = 4,

            /// <summary>
            /// Enum POPUPEnum for POPUP
            /// </summary>
            [EnumMember(Value = "POPUP")]
            POPUPEnum = 5,

            /// <summary>
            /// Enum POPUPSOUNDEnum for POPUP_SOUND
            /// </summary>
            [EnumMember(Value = "POPUP_SOUND")]
            POPUPSOUNDEnum = 6,

            /// <summary>
            /// Enum CUSTOMEnum for CUSTOM
            /// </summary>
            [EnumMember(Value = "CUSTOM")]
            CUSTOMEnum = 7,

            /// <summary>
            /// Enum MESSAGEEnum for MESSAGE
            /// </summary>
            [EnumMember(Value = "MESSAGE")]
            MESSAGEEnum = 8,

            /// <summary>
            /// Enum NAMETEXTEnum for NAME_TEXT
            /// </summary>
            [EnumMember(Value = "NAME_TEXT")]
            NAMETEXTEnum = 9,

            /// <summary>
            /// Enum PERSTICKERTEXTEnum for PER_STICKER_TEXT
            /// </summary>
            [EnumMember(Value = "PER_STICKER_TEXT")]
            PERSTICKERTEXTEnum = 10,
        }

        /// <summary>
        /// Gets or Sets StickerResourceType
        /// </summary>
        [Required]
        [DataMember(Name = "stickerResourceType", EmitDefaultValue = true)]
        public StickerResourceTypeEnum StickerResourceType { get; set; }

        /// <summary>
        /// Array of up to 15 keywords describing the sticker. If a sticker has 16 or more keywords, a random selection of 15 keywords will be returned. The keyword selection is random for each event, so different keywords may be returned for the same sticker.
        /// </summary>
        /// <value>Array of up to 15 keywords describing the sticker. If a sticker has 16 or more keywords, a random selection of 15 keywords will be returned. The keyword selection is random for each event, so different keywords may be returned for the same sticker. </value>
        [DataMember(Name = "keywords", EmitDefaultValue = false)]
        public List<string> Keywords { get; set; }

        /// <summary>
        /// Any text entered by the user. This property is only included for message stickers. Max character limit: 100
        /// </summary>
        /// <value>Any text entered by the user. This property is only included for message stickers. Max character limit: 100 </value>
        [MaxLength(100)]
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Quote token to quote this message.
        /// </summary>
        /// <value>Quote token to quote this message. </value>
        [Required]
        [DataMember(Name = "quoteToken", EmitDefaultValue = false)]
        public string QuoteToken { get; set; }

        /// <summary>
        /// Message ID of a quoted message. Only included when the received message quotes a past message.
        /// </summary>
        /// <value>Message ID of a quoted message. Only included when the received message quotes a past message.  </value>
        [DataMember(Name = "quotedMessageId", EmitDefaultValue = false)]
        public string QuotedMessageId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StickerMessageContent {\n");
            sb.Append("  PackageId: ").Append(PackageId).Append("\n");
            sb.Append("  StickerId: ").Append(StickerId).Append("\n");
            sb.Append("  StickerResourceType: ").Append(StickerResourceType).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  QuoteToken: ").Append(QuoteToken).Append("\n");
            sb.Append("  QuotedMessageId: ").Append(QuotedMessageId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public new string ToJson()
        {
            var options = new JsonSerializerOptions { WriteIndented = true };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((StickerMessageContent)obj);
        }

        /// <summary>
        /// Returns true if StickerMessageContent instances are equal
        /// </summary>
        /// <param name="other">Instance of StickerMessageContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StickerMessageContent other)
        {
            if (other is null)
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (
                    PackageId == other.PackageId
                    || PackageId != null && PackageId.Equals(other.PackageId)
                )
                && (
                    StickerId == other.StickerId
                    || StickerId != null && StickerId.Equals(other.StickerId)
                )
                && (
                    StickerResourceType == other.StickerResourceType
                    || StickerResourceType.Equals(other.StickerResourceType)
                )
                && (
                    Keywords == other.Keywords
                    || Keywords != null
                        && other.Keywords != null
                        && Keywords.SequenceEqual(other.Keywords)
                )
                && (Text == other.Text || Text != null && Text.Equals(other.Text))
                && (
                    QuoteToken == other.QuoteToken
                    || QuoteToken != null && QuoteToken.Equals(other.QuoteToken)
                )
                && (
                    QuotedMessageId == other.QuotedMessageId
                    || QuotedMessageId != null && QuotedMessageId.Equals(other.QuotedMessageId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (PackageId != null)
                    hashCode = hashCode * 59 + PackageId.GetHashCode();
                if (StickerId != null)
                    hashCode = hashCode * 59 + StickerId.GetHashCode();

                hashCode = hashCode * 59 + StickerResourceType.GetHashCode();
                if (Keywords != null)
                    hashCode = hashCode * 59 + Keywords.GetHashCode();
                if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                if (QuoteToken != null)
                    hashCode = hashCode * 59 + QuoteToken.GetHashCode();
                if (QuotedMessageId != null)
                    hashCode = hashCode * 59 + QuotedMessageId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(StickerMessageContent left, StickerMessageContent right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StickerMessageContent left, StickerMessageContent right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
