/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{ 
    /// <summary>
    /// Audience group job
    /// </summary>
    [DataContract]
    public partial class AudienceGroupJob : IEquatable<AudienceGroupJob>
    {
        /// <summary>
        /// A job ID.
        /// </summary>
        /// <value>A job ID.</value>
        [DataMember(Name="audienceGroupJobId", EmitDefaultValue=true)]
        public long AudienceGroupJobId { get; set; }

        /// <summary>
        /// An audience ID.
        /// </summary>
        /// <value>An audience ID.</value>
        [DataMember(Name="audienceGroupId", EmitDefaultValue=true)]
        public long AudienceGroupId { get; set; }

        /// <summary>
        /// The job&#39;s description.
        /// </summary>
        /// <value>The job&#39;s description.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public AudienceGroupJobType Type { get; set; }

        /// <summary>
        /// Gets or Sets JobStatus
        /// </summary>
        [DataMember(Name="jobStatus", EmitDefaultValue=true)]
        public AudienceGroupJobStatus JobStatus { get; set; }

        /// <summary>
        /// Gets or Sets FailedType
        /// </summary>
        [DataMember(Name="failedType", EmitDefaultValue=true)]
        public AudienceGroupJobFailedType FailedType { get; set; }

        /// <summary>
        /// The number of accounts (recipients) that were added or removed.
        /// </summary>
        /// <value>The number of accounts (recipients) that were added or removed.</value>
        [DataMember(Name="audienceCount", EmitDefaultValue=true)]
        public long AudienceCount { get; set; }

        /// <summary>
        /// When the job was created (in UNIX time).
        /// </summary>
        /// <value>When the job was created (in UNIX time).</value>
        [DataMember(Name="created", EmitDefaultValue=true)]
        public long Created { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AudienceGroupJob {\n");
            sb.Append("  AudienceGroupJobId: ").Append(AudienceGroupJobId).Append("\n");
            sb.Append("  AudienceGroupId: ").Append(AudienceGroupId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  JobStatus: ").Append(JobStatus).Append("\n");
            sb.Append("  FailedType: ").Append(FailedType).Append("\n");
            sb.Append("  AudienceCount: ").Append(AudienceCount).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AudienceGroupJob)obj);
        }

        /// <summary>
        /// Returns true if AudienceGroupJob instances are equal
        /// </summary>
        /// <param name="other">Instance of AudienceGroupJob to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AudienceGroupJob other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AudienceGroupJobId == other.AudienceGroupJobId ||
                    
                    AudienceGroupJobId.Equals(other.AudienceGroupJobId)
                ) && 
                (
                    AudienceGroupId == other.AudienceGroupId ||
                    
                    AudienceGroupId.Equals(other.AudienceGroupId)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    JobStatus == other.JobStatus ||
                    
                    JobStatus.Equals(other.JobStatus)
                ) && 
                (
                    FailedType == other.FailedType ||
                    
                    FailedType.Equals(other.FailedType)
                ) && 
                (
                    AudienceCount == other.AudienceCount ||
                    
                    AudienceCount.Equals(other.AudienceCount)
                ) && 
                (
                    Created == other.Created ||
                    
                    Created.Equals(other.Created)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + AudienceGroupJobId.GetHashCode();
                    
                    hashCode = hashCode * 59 + AudienceGroupId.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    
                    hashCode = hashCode * 59 + JobStatus.GetHashCode();
                    
                    hashCode = hashCode * 59 + FailedType.GetHashCode();
                    
                    hashCode = hashCode * 59 + AudienceCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + Created.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AudienceGroupJob left, AudienceGroupJob right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AudienceGroupJob left, AudienceGroupJob right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
