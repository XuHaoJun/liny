/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{
    /// <summary>
    /// Send mission stickers (v3)
    /// </summary>
    [DataContract]
    public partial class MissionStickerRequest : IEquatable<MissionStickerRequest>
    {
        /// <summary>
        /// Destination user ID
        /// </summary>
        /// <value>Destination user ID</value>
        [Required]
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public string To { get; set; }

        /// <summary>
        /// Package ID for a set of stickers
        /// </summary>
        /// <value>Package ID for a set of stickers</value>
        [Required]
        [DataMember(Name = "productId", EmitDefaultValue = false)]
        public string ProductId { get; set; }

        /// <summary>
        /// &#x60;STICKER&#x60;
        /// </summary>
        /// <value>&#x60;STICKER&#x60;</value>
        /* <example>STICKER</example> */
        [Required]
        [DataMember(Name = "productType", EmitDefaultValue = false)]
        public string ProductType { get; set; }

        /// <summary>
        /// &#x60;false&#x60;
        /// </summary>
        /// <value>&#x60;false&#x60;</value>
        /* <example>false</example> */
        [Required]
        [DataMember(Name = "sendPresentMessage", EmitDefaultValue = true)]
        public bool SendPresentMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MissionStickerRequest {\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  SendPresentMessage: ").Append(SendPresentMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions { WriteIndented = true };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((MissionStickerRequest)obj);
        }

        /// <summary>
        /// Returns true if MissionStickerRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of MissionStickerRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MissionStickerRequest other)
        {
            if (other is null)
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (To == other.To || To != null && To.Equals(other.To))
                && (
                    ProductId == other.ProductId
                    || ProductId != null && ProductId.Equals(other.ProductId)
                )
                && (
                    ProductType == other.ProductType
                    || ProductType != null && ProductType.Equals(other.ProductType)
                )
                && (
                    SendPresentMessage == other.SendPresentMessage
                    || SendPresentMessage.Equals(other.SendPresentMessage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                if (ProductId != null)
                    hashCode = hashCode * 59 + ProductId.GetHashCode();
                if (ProductType != null)
                    hashCode = hashCode * 59 + ProductType.GetHashCode();

                hashCode = hashCode * 59 + SendPresentMessage.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(MissionStickerRequest left, MissionStickerRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MissionStickerRequest left, MissionStickerRequest right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
