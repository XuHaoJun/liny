/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class RichMenuResponse : IEquatable<RichMenuResponse>
    {
        /// <summary>
        /// ID of a rich menu
        /// </summary>
        /// <value>ID of a rich menu</value>
        [Required]
        [DataMember(Name="richMenuId", EmitDefaultValue=false)]
        public string RichMenuId { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [Required]
        [DataMember(Name="size", EmitDefaultValue=false)]
        public RichMenuSize Size { get; set; }

        /// <summary>
        /// &#x60;true&#x60; to display the rich menu by default. Otherwise, &#x60;false&#x60;.
        /// </summary>
        /// <value>&#x60;true&#x60; to display the rich menu by default. Otherwise, &#x60;false&#x60;.</value>
        [Required]
        [DataMember(Name="selected", EmitDefaultValue=true)]
        public bool Selected { get; set; }

        /// <summary>
        /// Name of the rich menu. This value can be used to help manage your rich menus and is not displayed to users.
        /// </summary>
        /// <value>Name of the rich menu. This value can be used to help manage your rich menus and is not displayed to users.</value>
        [Required]
        [MaxLength(300)]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Text displayed in the chat bar
        /// </summary>
        /// <value>Text displayed in the chat bar</value>
        [Required]
        [MaxLength(14)]
        [DataMember(Name="chatBarText", EmitDefaultValue=false)]
        public string ChatBarText { get; set; }

        /// <summary>
        /// Array of area objects which define the coordinates and size of tappable areas
        /// </summary>
        /// <value>Array of area objects which define the coordinates and size of tappable areas</value>
        [Required]
        [DataMember(Name="areas", EmitDefaultValue=false)]
        public List<RichMenuArea> Areas { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RichMenuResponse {\n");
            sb.Append("  RichMenuId: ").Append(RichMenuId).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Selected: ").Append(Selected).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ChatBarText: ").Append(ChatBarText).Append("\n");
            sb.Append("  Areas: ").Append(Areas).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RichMenuResponse)obj);
        }

        /// <summary>
        /// Returns true if RichMenuResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of RichMenuResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RichMenuResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RichMenuId == other.RichMenuId ||
                    RichMenuId != null &&
                    RichMenuId.Equals(other.RichMenuId)
                ) && 
                (
                    Size == other.Size ||
                    Size != null &&
                    Size.Equals(other.Size)
                ) && 
                (
                    Selected == other.Selected ||
                    
                    Selected.Equals(other.Selected)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ChatBarText == other.ChatBarText ||
                    ChatBarText != null &&
                    ChatBarText.Equals(other.ChatBarText)
                ) && 
                (
                    Areas == other.Areas ||
                    Areas != null &&
                    other.Areas != null &&
                    Areas.SequenceEqual(other.Areas)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RichMenuId != null)
                    hashCode = hashCode * 59 + RichMenuId.GetHashCode();
                    if (Size != null)
                    hashCode = hashCode * 59 + Size.GetHashCode();
                    
                    hashCode = hashCode * 59 + Selected.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ChatBarText != null)
                    hashCode = hashCode * 59 + ChatBarText.GetHashCode();
                    if (Areas != null)
                    hashCode = hashCode * 59 + Areas.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RichMenuResponse left, RichMenuResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RichMenuResponse left, RichMenuResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
