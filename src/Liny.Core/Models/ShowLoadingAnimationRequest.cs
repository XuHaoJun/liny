/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ShowLoadingAnimationRequest : IEquatable<ShowLoadingAnimationRequest>
    {
        /// <summary>
        /// User ID of the target user for whom the loading animation is to be displayed.
        /// </summary>
        /// <value>User ID of the target user for whom the loading animation is to be displayed.</value>
        [Required]
        [DataMember(Name="chatId", EmitDefaultValue=false)]
        public string ChatId { get; set; }

        /// <summary>
        /// The number of seconds to display the loading indicator. It must be a multiple of 5. The maximum value is 60 seconds. 
        /// </summary>
        /// <value>The number of seconds to display the loading indicator. It must be a multiple of 5. The maximum value is 60 seconds. </value>
        [Range(5, 60)]
        [DataMember(Name="loadingSeconds", EmitDefaultValue=true)]
        public int LoadingSeconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShowLoadingAnimationRequest {\n");
            sb.Append("  ChatId: ").Append(ChatId).Append("\n");
            sb.Append("  LoadingSeconds: ").Append(LoadingSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ShowLoadingAnimationRequest)obj);
        }

        /// <summary>
        /// Returns true if ShowLoadingAnimationRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ShowLoadingAnimationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowLoadingAnimationRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ChatId == other.ChatId ||
                    ChatId != null &&
                    ChatId.Equals(other.ChatId)
                ) && 
                (
                    LoadingSeconds == other.LoadingSeconds ||
                    
                    LoadingSeconds.Equals(other.LoadingSeconds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ChatId != null)
                    hashCode = hashCode * 59 + ChatId.GetHashCode();
                    
                    hashCode = hashCode * 59 + LoadingSeconds.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ShowLoadingAnimationRequest left, ShowLoadingAnimationRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ShowLoadingAnimationRequest left, ShowLoadingAnimationRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
