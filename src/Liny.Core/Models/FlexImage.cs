/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FlexImage : FlexComponent, IEquatable<FlexImage>
    {
        /// <summary>
        /// Image URL (Max character limit: 2000) Protocol: HTTPS (TLS 1.2 or later) Image format: JPEG or PNG Maximum image size: 1024×1024 pixels Maximum file size: 10 MB (300 KB when the animated property is true) 
        /// </summary>
        /// <value>Image URL (Max character limit: 2000) Protocol: HTTPS (TLS 1.2 or later) Image format: JPEG or PNG Maximum image size: 1024×1024 pixels Maximum file size: 10 MB (300 KB when the animated property is true) </value>
        [Required]
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// The ratio of the width or height of this component within the parent box.
        /// </summary>
        /// <value>The ratio of the width or height of this component within the parent box.</value>
        [DataMember(Name="flex", EmitDefaultValue=true)]
        public int Flex { get; set; }

        /// <summary>
        /// The minimum amount of space to include before this component in its parent container. 
        /// </summary>
        /// <value>The minimum amount of space to include before this component in its parent container. </value>
        [DataMember(Name="margin", EmitDefaultValue=false)]
        public string Margin { get; set; }


        /// <summary>
        /// Reference for offsetTop, offsetBottom, offsetStart, and offsetEnd. Specify one of the following values:  `relative`: Use the previous box as reference. `absolute`: Use the top left of parent element as reference. The default value is relative. 
        /// </summary>
        /// <value>Reference for offsetTop, offsetBottom, offsetStart, and offsetEnd. Specify one of the following values:  `relative`: Use the previous box as reference. `absolute`: Use the top left of parent element as reference. The default value is relative. </value>
        
        public enum PositionEnum
        {
            
            /// <summary>
            /// Enum RelativeEnum for relative
            /// </summary>
            [EnumMember(Value = "relative")]
            RelativeEnum = 1,
            
            /// <summary>
            /// Enum AbsoluteEnum for absolute
            /// </summary>
            [EnumMember(Value = "absolute")]
            AbsoluteEnum = 2
        }

        /// <summary>
        /// Reference for offsetTop, offsetBottom, offsetStart, and offsetEnd. Specify one of the following values:  &#x60;relative&#x60;: Use the previous box as reference. &#x60;absolute&#x60;: Use the top left of parent element as reference. The default value is relative. 
        /// </summary>
        /// <value>Reference for offsetTop, offsetBottom, offsetStart, and offsetEnd. Specify one of the following values:  &#x60;relative&#x60;: Use the previous box as reference. &#x60;absolute&#x60;: Use the top left of parent element as reference. The default value is relative. </value>
        [DataMember(Name="position", EmitDefaultValue=true)]
        public PositionEnum Position { get; set; }

        /// <summary>
        /// Offset.
        /// </summary>
        /// <value>Offset.</value>
        [DataMember(Name="offsetTop", EmitDefaultValue=false)]
        public string OffsetTop { get; set; }

        /// <summary>
        /// Offset.
        /// </summary>
        /// <value>Offset.</value>
        [DataMember(Name="offsetBottom", EmitDefaultValue=false)]
        public string OffsetBottom { get; set; }

        /// <summary>
        /// Offset.
        /// </summary>
        /// <value>Offset.</value>
        [DataMember(Name="offsetStart", EmitDefaultValue=false)]
        public string OffsetStart { get; set; }

        /// <summary>
        /// Offset.
        /// </summary>
        /// <value>Offset.</value>
        [DataMember(Name="offsetEnd", EmitDefaultValue=false)]
        public string OffsetEnd { get; set; }


        /// <summary>
        /// Alignment style in horizontal direction. 
        /// </summary>
        /// <value>Alignment style in horizontal direction. </value>
        
        public enum AlignEnum
        {
            
            /// <summary>
            /// Enum StartEnum for start
            /// </summary>
            [EnumMember(Value = "start")]
            StartEnum = 1,
            
            /// <summary>
            /// Enum EndEnum for end
            /// </summary>
            [EnumMember(Value = "end")]
            EndEnum = 2,
            
            /// <summary>
            /// Enum CenterEnum for center
            /// </summary>
            [EnumMember(Value = "center")]
            CenterEnum = 3
        }

        /// <summary>
        /// Alignment style in horizontal direction. 
        /// </summary>
        /// <value>Alignment style in horizontal direction. </value>
        [DataMember(Name="align", EmitDefaultValue=true)]
        public AlignEnum Align { get; set; }


        /// <summary>
        /// Alignment style in vertical direction.
        /// </summary>
        /// <value>Alignment style in vertical direction.</value>
        
        public enum GravityEnum
        {
            
            /// <summary>
            /// Enum TopEnum for top
            /// </summary>
            [EnumMember(Value = "top")]
            TopEnum = 1,
            
            /// <summary>
            /// Enum BottomEnum for bottom
            /// </summary>
            [EnumMember(Value = "bottom")]
            BottomEnum = 2,
            
            /// <summary>
            /// Enum CenterEnum for center
            /// </summary>
            [EnumMember(Value = "center")]
            CenterEnum = 3
        }

        /// <summary>
        /// Alignment style in vertical direction.
        /// </summary>
        /// <value>Alignment style in vertical direction.</value>
        [DataMember(Name="gravity", EmitDefaultValue=true)]
        public GravityEnum Gravity { get; set; }

        /// <summary>
        /// The maximum image width. This is md by default. 
        /// </summary>
        /// <value>The maximum image width. This is md by default. </value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public string Size { get; set; } = "md";

        /// <summary>
        /// Aspect ratio of the image. &#x60;{width}:{height}&#x60; format. Specify the value of &#x60;{width}&#x60; and &#x60;{height}&#x60; in the range from &#x60;1&#x60; to &#x60;100000&#x60;. However, you cannot set &#x60;{height}&#x60; to a value that is more than three times the value of &#x60;{width}&#x60;. The default value is &#x60;1:1&#x60;. 
        /// </summary>
        /// <value>Aspect ratio of the image. &#x60;{width}:{height}&#x60; format. Specify the value of &#x60;{width}&#x60; and &#x60;{height}&#x60; in the range from &#x60;1&#x60; to &#x60;100000&#x60;. However, you cannot set &#x60;{height}&#x60; to a value that is more than three times the value of &#x60;{width}&#x60;. The default value is &#x60;1:1&#x60;. </value>
        [DataMember(Name="aspectRatio", EmitDefaultValue=false)]
        public string AspectRatio { get; set; }


        /// <summary>
        /// The display style of the image if the aspect ratio of the image and that specified by the aspectRatio property do not match. 
        /// </summary>
        /// <value>The display style of the image if the aspect ratio of the image and that specified by the aspectRatio property do not match. </value>
        
        public enum AspectModeEnum
        {
            
            /// <summary>
            /// Enum FitEnum for fit
            /// </summary>
            [EnumMember(Value = "fit")]
            FitEnum = 1,
            
            /// <summary>
            /// Enum CoverEnum for cover
            /// </summary>
            [EnumMember(Value = "cover")]
            CoverEnum = 2
        }

        /// <summary>
        /// The display style of the image if the aspect ratio of the image and that specified by the aspectRatio property do not match. 
        /// </summary>
        /// <value>The display style of the image if the aspect ratio of the image and that specified by the aspectRatio property do not match. </value>
        [DataMember(Name="aspectMode", EmitDefaultValue=true)]
        public AspectModeEnum AspectMode { get; set; }

        /// <summary>
        /// Background color of the image. Use a hexadecimal color code.
        /// </summary>
        /// <value>Background color of the image. Use a hexadecimal color code.</value>
        [DataMember(Name="backgroundColor", EmitDefaultValue=false)]
        public string BackgroundColor { get; set; }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public Action Action { get; set; }

        /// <summary>
        /// When this is &#x60;true&#x60;, an animated image (APNG) plays. You can specify a value of true up to 10 images in a single message. You can&#39;t send messages that exceed this limit. This is &#x60;false&#x60; by default. Animated images larger than 300 KB aren&#39;t played back. 
        /// </summary>
        /// <value>When this is &#x60;true&#x60;, an animated image (APNG) plays. You can specify a value of true up to 10 images in a single message. You can&#39;t send messages that exceed this limit. This is &#x60;false&#x60; by default. Animated images larger than 300 KB aren&#39;t played back. </value>
        [DataMember(Name="animated", EmitDefaultValue=true)]
        public bool Animated { get; set; } = false;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlexImage {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Flex: ").Append(Flex).Append("\n");
            sb.Append("  Margin: ").Append(Margin).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  OffsetTop: ").Append(OffsetTop).Append("\n");
            sb.Append("  OffsetBottom: ").Append(OffsetBottom).Append("\n");
            sb.Append("  OffsetStart: ").Append(OffsetStart).Append("\n");
            sb.Append("  OffsetEnd: ").Append(OffsetEnd).Append("\n");
            sb.Append("  Align: ").Append(Align).Append("\n");
            sb.Append("  Gravity: ").Append(Gravity).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  AspectRatio: ").Append(AspectRatio).Append("\n");
            sb.Append("  AspectMode: ").Append(AspectMode).Append("\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Animated: ").Append(Animated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FlexImage)obj);
        }

        /// <summary>
        /// Returns true if FlexImage instances are equal
        /// </summary>
        /// <param name="other">Instance of FlexImage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlexImage other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                ) && 
                (
                    Flex == other.Flex ||
                    
                    Flex.Equals(other.Flex)
                ) && 
                (
                    Margin == other.Margin ||
                    Margin != null &&
                    Margin.Equals(other.Margin)
                ) && 
                (
                    Position == other.Position ||
                    
                    Position.Equals(other.Position)
                ) && 
                (
                    OffsetTop == other.OffsetTop ||
                    OffsetTop != null &&
                    OffsetTop.Equals(other.OffsetTop)
                ) && 
                (
                    OffsetBottom == other.OffsetBottom ||
                    OffsetBottom != null &&
                    OffsetBottom.Equals(other.OffsetBottom)
                ) && 
                (
                    OffsetStart == other.OffsetStart ||
                    OffsetStart != null &&
                    OffsetStart.Equals(other.OffsetStart)
                ) && 
                (
                    OffsetEnd == other.OffsetEnd ||
                    OffsetEnd != null &&
                    OffsetEnd.Equals(other.OffsetEnd)
                ) && 
                (
                    Align == other.Align ||
                    
                    Align.Equals(other.Align)
                ) && 
                (
                    Gravity == other.Gravity ||
                    
                    Gravity.Equals(other.Gravity)
                ) && 
                (
                    Size == other.Size ||
                    Size != null &&
                    Size.Equals(other.Size)
                ) && 
                (
                    AspectRatio == other.AspectRatio ||
                    AspectRatio != null &&
                    AspectRatio.Equals(other.AspectRatio)
                ) && 
                (
                    AspectMode == other.AspectMode ||
                    
                    AspectMode.Equals(other.AspectMode)
                ) && 
                (
                    BackgroundColor == other.BackgroundColor ||
                    BackgroundColor != null &&
                    BackgroundColor.Equals(other.BackgroundColor)
                ) && 
                (
                    Action == other.Action ||
                    Action != null &&
                    Action.Equals(other.Action)
                ) && 
                (
                    Animated == other.Animated ||
                    
                    Animated.Equals(other.Animated)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                    
                    hashCode = hashCode * 59 + Flex.GetHashCode();
                    if (Margin != null)
                    hashCode = hashCode * 59 + Margin.GetHashCode();
                    
                    hashCode = hashCode * 59 + Position.GetHashCode();
                    if (OffsetTop != null)
                    hashCode = hashCode * 59 + OffsetTop.GetHashCode();
                    if (OffsetBottom != null)
                    hashCode = hashCode * 59 + OffsetBottom.GetHashCode();
                    if (OffsetStart != null)
                    hashCode = hashCode * 59 + OffsetStart.GetHashCode();
                    if (OffsetEnd != null)
                    hashCode = hashCode * 59 + OffsetEnd.GetHashCode();
                    
                    hashCode = hashCode * 59 + Align.GetHashCode();
                    
                    hashCode = hashCode * 59 + Gravity.GetHashCode();
                    if (Size != null)
                    hashCode = hashCode * 59 + Size.GetHashCode();
                    if (AspectRatio != null)
                    hashCode = hashCode * 59 + AspectRatio.GetHashCode();
                    
                    hashCode = hashCode * 59 + AspectMode.GetHashCode();
                    if (BackgroundColor != null)
                    hashCode = hashCode * 59 + BackgroundColor.GetHashCode();
                    if (Action != null)
                    hashCode = hashCode * 59 + Action.GetHashCode();
                    
                    hashCode = hashCode * 59 + Animated.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FlexImage left, FlexImage right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FlexImage left, FlexImage right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
