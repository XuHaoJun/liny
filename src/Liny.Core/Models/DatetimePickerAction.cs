/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class DatetimePickerAction : Action, IEquatable<DatetimePickerAction>
    {
        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [StringLength(300, MinimumLength = 0)]
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public string Data { get; set; }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>

        public enum ModeEnum
        {
            /// <summary>
            /// Enum DateEnum for date
            /// </summary>
            [EnumMember(Value = "date")]
            DateEnum = 1,

            /// <summary>
            /// Enum TimeEnum for time
            /// </summary>
            [EnumMember(Value = "time")]
            TimeEnum = 2,

            /// <summary>
            /// Enum DatetimeEnum for datetime
            /// </summary>
            [EnumMember(Value = "datetime")]
            DatetimeEnum = 3,
        }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name = "mode", EmitDefaultValue = true)]
        public ModeEnum Mode { get; set; }

        /// <summary>
        /// Gets or Sets Initial
        /// </summary>
        [DataMember(Name = "initial", EmitDefaultValue = false)]
        public string Initial { get; set; }

        /// <summary>
        /// Gets or Sets Max
        /// </summary>
        [DataMember(Name = "max", EmitDefaultValue = false)]
        public string Max { get; set; }

        /// <summary>
        /// Gets or Sets Min
        /// </summary>
        [DataMember(Name = "min", EmitDefaultValue = false)]
        public string Min { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DatetimePickerAction {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Initial: ").Append(Initial).Append("\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("  Min: ").Append(Min).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions { WriteIndented = true };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((DatetimePickerAction)obj);
        }

        /// <summary>
        /// Returns true if DatetimePickerAction instances are equal
        /// </summary>
        /// <param name="other">Instance of DatetimePickerAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DatetimePickerAction other)
        {
            if (other is null)
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (Data == other.Data || Data != null && Data.Equals(other.Data))
                && (Mode == other.Mode || Mode.Equals(other.Mode))
                && (Initial == other.Initial || Initial != null && Initial.Equals(other.Initial))
                && (Max == other.Max || Max != null && Max.Equals(other.Max))
                && (Min == other.Min || Min != null && Min.Equals(other.Min));
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Data != null)
                    hashCode = hashCode * 59 + Data.GetHashCode();

                hashCode = hashCode * 59 + Mode.GetHashCode();
                if (Initial != null)
                    hashCode = hashCode * 59 + Initial.GetHashCode();
                if (Max != null)
                    hashCode = hashCode * 59 + Max.GetHashCode();
                if (Min != null)
                    hashCode = hashCode * 59 + Min.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(DatetimePickerAction left, DatetimePickerAction right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DatetimePickerAction left, DatetimePickerAction right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
