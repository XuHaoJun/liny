/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FlexBox : FlexComponent, IEquatable<FlexBox>
    {

        /// <summary>
        /// Gets or Sets Layout
        /// </summary>
        
        public enum LayoutEnum
        {
            
            /// <summary>
            /// Enum HorizontalEnum for horizontal
            /// </summary>
            [EnumMember(Value = "horizontal")]
            HorizontalEnum = 1,
            
            /// <summary>
            /// Enum VerticalEnum for vertical
            /// </summary>
            [EnumMember(Value = "vertical")]
            VerticalEnum = 2,
            
            /// <summary>
            /// Enum BaselineEnum for baseline
            /// </summary>
            [EnumMember(Value = "baseline")]
            BaselineEnum = 3
        }

        /// <summary>
        /// Gets or Sets Layout
        /// </summary>
        [Required]
        [DataMember(Name="layout", EmitDefaultValue=true)]
        public LayoutEnum Layout { get; set; }

        /// <summary>
        /// Gets or Sets Flex
        /// </summary>
        [DataMember(Name="flex", EmitDefaultValue=true)]
        public int Flex { get; set; }

        /// <summary>
        /// Gets or Sets Contents
        /// </summary>
        [Required]
        [DataMember(Name="contents", EmitDefaultValue=false)]
        public List<FlexComponent> Contents { get; set; }

        /// <summary>
        /// Gets or Sets Spacing
        /// </summary>
        [DataMember(Name="spacing", EmitDefaultValue=false)]
        public string Spacing { get; set; }

        /// <summary>
        /// Gets or Sets Margin
        /// </summary>
        [DataMember(Name="margin", EmitDefaultValue=false)]
        public string Margin { get; set; }


        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        
        public enum PositionEnum
        {
            
            /// <summary>
            /// Enum RelativeEnum for relative
            /// </summary>
            [EnumMember(Value = "relative")]
            RelativeEnum = 1,
            
            /// <summary>
            /// Enum AbsoluteEnum for absolute
            /// </summary>
            [EnumMember(Value = "absolute")]
            AbsoluteEnum = 2
        }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=true)]
        public PositionEnum Position { get; set; }

        /// <summary>
        /// Gets or Sets OffsetTop
        /// </summary>
        [DataMember(Name="offsetTop", EmitDefaultValue=false)]
        public string OffsetTop { get; set; }

        /// <summary>
        /// Gets or Sets OffsetBottom
        /// </summary>
        [DataMember(Name="offsetBottom", EmitDefaultValue=false)]
        public string OffsetBottom { get; set; }

        /// <summary>
        /// Gets or Sets OffsetStart
        /// </summary>
        [DataMember(Name="offsetStart", EmitDefaultValue=false)]
        public string OffsetStart { get; set; }

        /// <summary>
        /// Gets or Sets OffsetEnd
        /// </summary>
        [DataMember(Name="offsetEnd", EmitDefaultValue=false)]
        public string OffsetEnd { get; set; }

        /// <summary>
        /// Gets or Sets BackgroundColor
        /// </summary>
        [DataMember(Name="backgroundColor", EmitDefaultValue=false)]
        public string BackgroundColor { get; set; }

        /// <summary>
        /// Gets or Sets BorderColor
        /// </summary>
        [DataMember(Name="borderColor", EmitDefaultValue=false)]
        public string BorderColor { get; set; }

        /// <summary>
        /// Gets or Sets BorderWidth
        /// </summary>
        [DataMember(Name="borderWidth", EmitDefaultValue=false)]
        public string BorderWidth { get; set; }

        /// <summary>
        /// Gets or Sets CornerRadius
        /// </summary>
        [DataMember(Name="cornerRadius", EmitDefaultValue=false)]
        public string CornerRadius { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public string Width { get; set; }

        /// <summary>
        /// Gets or Sets MaxWidth
        /// </summary>
        [DataMember(Name="maxWidth", EmitDefaultValue=false)]
        public string MaxWidth { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public string Height { get; set; }

        /// <summary>
        /// Gets or Sets MaxHeight
        /// </summary>
        [DataMember(Name="maxHeight", EmitDefaultValue=false)]
        public string MaxHeight { get; set; }

        /// <summary>
        /// Gets or Sets PaddingAll
        /// </summary>
        [DataMember(Name="paddingAll", EmitDefaultValue=false)]
        public string PaddingAll { get; set; }

        /// <summary>
        /// Gets or Sets PaddingTop
        /// </summary>
        [DataMember(Name="paddingTop", EmitDefaultValue=false)]
        public string PaddingTop { get; set; }

        /// <summary>
        /// Gets or Sets PaddingBottom
        /// </summary>
        [DataMember(Name="paddingBottom", EmitDefaultValue=false)]
        public string PaddingBottom { get; set; }

        /// <summary>
        /// Gets or Sets PaddingStart
        /// </summary>
        [DataMember(Name="paddingStart", EmitDefaultValue=false)]
        public string PaddingStart { get; set; }

        /// <summary>
        /// Gets or Sets PaddingEnd
        /// </summary>
        [DataMember(Name="paddingEnd", EmitDefaultValue=false)]
        public string PaddingEnd { get; set; }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public Action Action { get; set; }


        /// <summary>
        /// Gets or Sets JustifyContent
        /// </summary>
        
        public enum JustifyContentEnum
        {
            
            /// <summary>
            /// Enum CenterEnum for center
            /// </summary>
            [EnumMember(Value = "center")]
            CenterEnum = 1,
            
            /// <summary>
            /// Enum FlexStartEnum for flex-start
            /// </summary>
            [EnumMember(Value = "flex-start")]
            FlexStartEnum = 2,
            
            /// <summary>
            /// Enum FlexEndEnum for flex-end
            /// </summary>
            [EnumMember(Value = "flex-end")]
            FlexEndEnum = 3,
            
            /// <summary>
            /// Enum SpaceBetweenEnum for space-between
            /// </summary>
            [EnumMember(Value = "space-between")]
            SpaceBetweenEnum = 4,
            
            /// <summary>
            /// Enum SpaceAroundEnum for space-around
            /// </summary>
            [EnumMember(Value = "space-around")]
            SpaceAroundEnum = 5,
            
            /// <summary>
            /// Enum SpaceEvenlyEnum for space-evenly
            /// </summary>
            [EnumMember(Value = "space-evenly")]
            SpaceEvenlyEnum = 6
        }

        /// <summary>
        /// Gets or Sets JustifyContent
        /// </summary>
        [DataMember(Name="justifyContent", EmitDefaultValue=true)]
        public JustifyContentEnum JustifyContent { get; set; }


        /// <summary>
        /// Gets or Sets AlignItems
        /// </summary>
        
        public enum AlignItemsEnum
        {
            
            /// <summary>
            /// Enum CenterEnum for center
            /// </summary>
            [EnumMember(Value = "center")]
            CenterEnum = 1,
            
            /// <summary>
            /// Enum FlexStartEnum for flex-start
            /// </summary>
            [EnumMember(Value = "flex-start")]
            FlexStartEnum = 2,
            
            /// <summary>
            /// Enum FlexEndEnum for flex-end
            /// </summary>
            [EnumMember(Value = "flex-end")]
            FlexEndEnum = 3
        }

        /// <summary>
        /// Gets or Sets AlignItems
        /// </summary>
        [DataMember(Name="alignItems", EmitDefaultValue=true)]
        public AlignItemsEnum AlignItems { get; set; }

        /// <summary>
        /// Gets or Sets Background
        /// </summary>
        [DataMember(Name="background", EmitDefaultValue=false)]
        public FlexBoxBackground Background { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlexBox {\n");
            sb.Append("  Layout: ").Append(Layout).Append("\n");
            sb.Append("  Flex: ").Append(Flex).Append("\n");
            sb.Append("  Contents: ").Append(Contents).Append("\n");
            sb.Append("  Spacing: ").Append(Spacing).Append("\n");
            sb.Append("  Margin: ").Append(Margin).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  OffsetTop: ").Append(OffsetTop).Append("\n");
            sb.Append("  OffsetBottom: ").Append(OffsetBottom).Append("\n");
            sb.Append("  OffsetStart: ").Append(OffsetStart).Append("\n");
            sb.Append("  OffsetEnd: ").Append(OffsetEnd).Append("\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("  BorderColor: ").Append(BorderColor).Append("\n");
            sb.Append("  BorderWidth: ").Append(BorderWidth).Append("\n");
            sb.Append("  CornerRadius: ").Append(CornerRadius).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  MaxWidth: ").Append(MaxWidth).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  MaxHeight: ").Append(MaxHeight).Append("\n");
            sb.Append("  PaddingAll: ").Append(PaddingAll).Append("\n");
            sb.Append("  PaddingTop: ").Append(PaddingTop).Append("\n");
            sb.Append("  PaddingBottom: ").Append(PaddingBottom).Append("\n");
            sb.Append("  PaddingStart: ").Append(PaddingStart).Append("\n");
            sb.Append("  PaddingEnd: ").Append(PaddingEnd).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  JustifyContent: ").Append(JustifyContent).Append("\n");
            sb.Append("  AlignItems: ").Append(AlignItems).Append("\n");
            sb.Append("  Background: ").Append(Background).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FlexBox)obj);
        }

        /// <summary>
        /// Returns true if FlexBox instances are equal
        /// </summary>
        /// <param name="other">Instance of FlexBox to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlexBox other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Layout == other.Layout ||
                    
                    Layout.Equals(other.Layout)
                ) && 
                (
                    Flex == other.Flex ||
                    
                    Flex.Equals(other.Flex)
                ) && 
                (
                    Contents == other.Contents ||
                    Contents != null &&
                    other.Contents != null &&
                    Contents.SequenceEqual(other.Contents)
                ) && 
                (
                    Spacing == other.Spacing ||
                    Spacing != null &&
                    Spacing.Equals(other.Spacing)
                ) && 
                (
                    Margin == other.Margin ||
                    Margin != null &&
                    Margin.Equals(other.Margin)
                ) && 
                (
                    Position == other.Position ||
                    
                    Position.Equals(other.Position)
                ) && 
                (
                    OffsetTop == other.OffsetTop ||
                    OffsetTop != null &&
                    OffsetTop.Equals(other.OffsetTop)
                ) && 
                (
                    OffsetBottom == other.OffsetBottom ||
                    OffsetBottom != null &&
                    OffsetBottom.Equals(other.OffsetBottom)
                ) && 
                (
                    OffsetStart == other.OffsetStart ||
                    OffsetStart != null &&
                    OffsetStart.Equals(other.OffsetStart)
                ) && 
                (
                    OffsetEnd == other.OffsetEnd ||
                    OffsetEnd != null &&
                    OffsetEnd.Equals(other.OffsetEnd)
                ) && 
                (
                    BackgroundColor == other.BackgroundColor ||
                    BackgroundColor != null &&
                    BackgroundColor.Equals(other.BackgroundColor)
                ) && 
                (
                    BorderColor == other.BorderColor ||
                    BorderColor != null &&
                    BorderColor.Equals(other.BorderColor)
                ) && 
                (
                    BorderWidth == other.BorderWidth ||
                    BorderWidth != null &&
                    BorderWidth.Equals(other.BorderWidth)
                ) && 
                (
                    CornerRadius == other.CornerRadius ||
                    CornerRadius != null &&
                    CornerRadius.Equals(other.CornerRadius)
                ) && 
                (
                    Width == other.Width ||
                    Width != null &&
                    Width.Equals(other.Width)
                ) && 
                (
                    MaxWidth == other.MaxWidth ||
                    MaxWidth != null &&
                    MaxWidth.Equals(other.MaxWidth)
                ) && 
                (
                    Height == other.Height ||
                    Height != null &&
                    Height.Equals(other.Height)
                ) && 
                (
                    MaxHeight == other.MaxHeight ||
                    MaxHeight != null &&
                    MaxHeight.Equals(other.MaxHeight)
                ) && 
                (
                    PaddingAll == other.PaddingAll ||
                    PaddingAll != null &&
                    PaddingAll.Equals(other.PaddingAll)
                ) && 
                (
                    PaddingTop == other.PaddingTop ||
                    PaddingTop != null &&
                    PaddingTop.Equals(other.PaddingTop)
                ) && 
                (
                    PaddingBottom == other.PaddingBottom ||
                    PaddingBottom != null &&
                    PaddingBottom.Equals(other.PaddingBottom)
                ) && 
                (
                    PaddingStart == other.PaddingStart ||
                    PaddingStart != null &&
                    PaddingStart.Equals(other.PaddingStart)
                ) && 
                (
                    PaddingEnd == other.PaddingEnd ||
                    PaddingEnd != null &&
                    PaddingEnd.Equals(other.PaddingEnd)
                ) && 
                (
                    Action == other.Action ||
                    Action != null &&
                    Action.Equals(other.Action)
                ) && 
                (
                    JustifyContent == other.JustifyContent ||
                    
                    JustifyContent.Equals(other.JustifyContent)
                ) && 
                (
                    AlignItems == other.AlignItems ||
                    
                    AlignItems.Equals(other.AlignItems)
                ) && 
                (
                    Background == other.Background ||
                    Background != null &&
                    Background.Equals(other.Background)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Layout.GetHashCode();
                    
                    hashCode = hashCode * 59 + Flex.GetHashCode();
                    if (Contents != null)
                    hashCode = hashCode * 59 + Contents.GetHashCode();
                    if (Spacing != null)
                    hashCode = hashCode * 59 + Spacing.GetHashCode();
                    if (Margin != null)
                    hashCode = hashCode * 59 + Margin.GetHashCode();
                    
                    hashCode = hashCode * 59 + Position.GetHashCode();
                    if (OffsetTop != null)
                    hashCode = hashCode * 59 + OffsetTop.GetHashCode();
                    if (OffsetBottom != null)
                    hashCode = hashCode * 59 + OffsetBottom.GetHashCode();
                    if (OffsetStart != null)
                    hashCode = hashCode * 59 + OffsetStart.GetHashCode();
                    if (OffsetEnd != null)
                    hashCode = hashCode * 59 + OffsetEnd.GetHashCode();
                    if (BackgroundColor != null)
                    hashCode = hashCode * 59 + BackgroundColor.GetHashCode();
                    if (BorderColor != null)
                    hashCode = hashCode * 59 + BorderColor.GetHashCode();
                    if (BorderWidth != null)
                    hashCode = hashCode * 59 + BorderWidth.GetHashCode();
                    if (CornerRadius != null)
                    hashCode = hashCode * 59 + CornerRadius.GetHashCode();
                    if (Width != null)
                    hashCode = hashCode * 59 + Width.GetHashCode();
                    if (MaxWidth != null)
                    hashCode = hashCode * 59 + MaxWidth.GetHashCode();
                    if (Height != null)
                    hashCode = hashCode * 59 + Height.GetHashCode();
                    if (MaxHeight != null)
                    hashCode = hashCode * 59 + MaxHeight.GetHashCode();
                    if (PaddingAll != null)
                    hashCode = hashCode * 59 + PaddingAll.GetHashCode();
                    if (PaddingTop != null)
                    hashCode = hashCode * 59 + PaddingTop.GetHashCode();
                    if (PaddingBottom != null)
                    hashCode = hashCode * 59 + PaddingBottom.GetHashCode();
                    if (PaddingStart != null)
                    hashCode = hashCode * 59 + PaddingStart.GetHashCode();
                    if (PaddingEnd != null)
                    hashCode = hashCode * 59 + PaddingEnd.GetHashCode();
                    if (Action != null)
                    hashCode = hashCode * 59 + Action.GetHashCode();
                    
                    hashCode = hashCode * 59 + JustifyContent.GetHashCode();
                    
                    hashCode = hashCode * 59 + AlignItems.GetHashCode();
                    if (Background != null)
                    hashCode = hashCode * 59 + Background.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FlexBox left, FlexBox right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FlexBox left, FlexBox right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
