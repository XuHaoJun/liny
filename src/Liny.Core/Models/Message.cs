/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using JsonSubTypes;
using Liny.Core.Converters;
using Swashbuckle.AspNetCore.Annotations;

namespace Liny.Core.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    [SwaggerDiscriminator("Type")]
    [JsonSubtypes.KnownSubType(typeof(AudioMessage), "audio")]
    [SwaggerSubType(typeof(AudioMessage), DiscriminatorValue = "audio")]
    [JsonSubtypes.KnownSubType(typeof(FlexMessage), "flex")]
    [SwaggerSubType(typeof(FlexMessage), DiscriminatorValue = "flex")]
    [JsonSubtypes.KnownSubType(typeof(ImageMessage), "image")]
    [SwaggerSubType(typeof(ImageMessage), DiscriminatorValue = "image")]
    [JsonSubtypes.KnownSubType(typeof(ImagemapMessage), "imagemap")]
    [SwaggerSubType(typeof(ImagemapMessage), DiscriminatorValue = "imagemap")]
    [JsonSubtypes.KnownSubType(typeof(LocationMessage), "location")]
    [SwaggerSubType(typeof(LocationMessage), DiscriminatorValue = "location")]
    [JsonSubtypes.KnownSubType(typeof(StickerMessage), "sticker")]
    [SwaggerSubType(typeof(StickerMessage), DiscriminatorValue = "sticker")]
    [JsonSubtypes.KnownSubType(typeof(TemplateMessage), "template")]
    [SwaggerSubType(typeof(TemplateMessage), DiscriminatorValue = "template")]
    [JsonSubtypes.KnownSubType(typeof(TextMessage), "text")]
    [SwaggerSubType(typeof(TextMessage), DiscriminatorValue = "text")]
    [JsonSubtypes.KnownSubType(typeof(TextMessageV2), "textV2")]
    [SwaggerSubType(typeof(TextMessageV2), DiscriminatorValue = "textV2")]
    [JsonSubtypes.KnownSubType(typeof(VideoMessage), "video")]
    [SwaggerSubType(typeof(VideoMessage), DiscriminatorValue = "video")]
    public partial class Message : IEquatable<Message>
    {
        /// <summary>
        /// Type of message
        /// </summary>
        /// <value>Type of message</value>
        [Required]
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets QuickReply
        /// </summary>
        [DataMember(Name = "quickReply", EmitDefaultValue = false)]
        public QuickReply QuickReply { get; set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [DataMember(Name = "sender", EmitDefaultValue = false)]
        public Sender Sender { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Message {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  QuickReply: ").Append(QuickReply).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions { WriteIndented = true };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((Message)obj);
        }

        /// <summary>
        /// Returns true if Message instances are equal
        /// </summary>
        /// <param name="other">Instance of Message to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Message other)
        {
            if (other is null)
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (Type == other.Type || Type != null && Type.Equals(other.Type))
                && (
                    QuickReply == other.QuickReply
                    || QuickReply != null && QuickReply.Equals(other.QuickReply)
                )
                && (Sender == other.Sender || Sender != null && Sender.Equals(other.Sender));
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                if (QuickReply != null)
                    hashCode = hashCode * 59 + QuickReply.GetHashCode();
                if (Sender != null)
                    hashCode = hashCode * 59 + Sender.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Message left, Message right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Message left, Message right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
