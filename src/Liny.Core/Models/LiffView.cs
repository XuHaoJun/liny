/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class LiffView : IEquatable<LiffView>
    {
        /// <summary>
        /// Size of the LIFF app view. Specify one of these values: - compact - tall - full
        /// </summary>
        /// <value>Size of the LIFF app view. Specify one of these values: - compact - tall - full </value>

        public enum TypeEnum
        {
            /// <summary>
            /// Enum CompactEnum for compact
            /// </summary>
            [EnumMember(Value = "compact")]
            CompactEnum = 1,

            /// <summary>
            /// Enum TallEnum for tall
            /// </summary>
            [EnumMember(Value = "tall")]
            TallEnum = 2,

            /// <summary>
            /// Enum FullEnum for full
            /// </summary>
            [EnumMember(Value = "full")]
            FullEnum = 3,
        }

        /// <summary>
        /// Size of the LIFF app view. Specify one of these values: - compact - tall - full
        /// </summary>
        /// <value>Size of the LIFF app view. Specify one of these values: - compact - tall - full </value>
        [Required]
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Endpoint URL. This is the URL of the web app that implements the LIFF app (e.g. https://example.com). Used when the LIFF app is launched using the LIFF URL. The URL scheme must be https. URL fragments (#URL-fragment) can&#39;t be specified.
        /// </summary>
        /// <value>Endpoint URL. This is the URL of the web app that implements the LIFF app (e.g. https://example.com). Used when the LIFF app is launched using the LIFF URL. The URL scheme must be https. URL fragments (#URL-fragment) can&#39;t be specified. </value>
        [Required]
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// &#x60;true&#x60; to use the LIFF app in modular mode. When in modular mode, the action button in the header is not displayed.
        /// </summary>
        /// <value>&#x60;true&#x60; to use the LIFF app in modular mode. When in modular mode, the action button in the header is not displayed. </value>
        [DataMember(Name = "moduleMode", EmitDefaultValue = true)]
        public bool ModuleMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LiffView {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  ModuleMode: ").Append(ModuleMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions { WriteIndented = true };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((LiffView)obj);
        }

        /// <summary>
        /// Returns true if LiffView instances are equal
        /// </summary>
        /// <param name="other">Instance of LiffView to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LiffView other)
        {
            if (other is null)
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (Type == other.Type || Type.Equals(other.Type))
                && (Url == other.Url || Url != null && Url.Equals(other.Url))
                && (ModuleMode == other.ModuleMode || ModuleMode.Equals(other.ModuleMode));
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)

                hashCode = hashCode * 59 + Type.GetHashCode();
                if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();

                hashCode = hashCode * 59 + ModuleMode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(LiffView left, LiffView right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LiffView left, LiffView right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
