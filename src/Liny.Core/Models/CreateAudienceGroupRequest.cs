/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{
    /// <summary>
    /// Create audience for uploading user IDs (by JSON)
    /// </summary>
    [DataContract]
    public partial class CreateAudienceGroupRequest : IEquatable<CreateAudienceGroupRequest>
    {
        /// <summary>
        /// The audience&#39;s name. This is case-insensitive, meaning AUDIENCE and audience are considered identical. Max character limit: 120
        /// </summary>
        /// <value>The audience&#39;s name. This is case-insensitive, meaning AUDIENCE and audience are considered identical. Max character limit: 120 </value>
        [MaxLength(120)]
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// To specify recipients by IFAs: set true. To specify recipients by user IDs: set false or omit isIfaAudience property.
        /// </summary>
        /// <value>To specify recipients by IFAs: set true. To specify recipients by user IDs: set false or omit isIfaAudience property. </value>
        [DataMember(Name = "isIfaAudience", EmitDefaultValue = true)]
        public bool IsIfaAudience { get; set; }

        /// <summary>
        /// The description to register for the job (in jobs[].description).
        /// </summary>
        /// <value>The description to register for the job (in jobs[].description). </value>
        [DataMember(Name = "uploadDescription", EmitDefaultValue = false)]
        public string UploadDescription { get; set; }

        /// <summary>
        /// An array of user IDs or IFAs. Max number: 10,000
        /// </summary>
        /// <value>An array of user IDs or IFAs. Max number: 10,000 </value>
        [DataMember(Name = "audiences", EmitDefaultValue = false)]
        public List<Audience> Audiences { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateAudienceGroupRequest {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsIfaAudience: ").Append(IsIfaAudience).Append("\n");
            sb.Append("  UploadDescription: ").Append(UploadDescription).Append("\n");
            sb.Append("  Audiences: ").Append(Audiences).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions { WriteIndented = true };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((CreateAudienceGroupRequest)obj);
        }

        /// <summary>
        /// Returns true if CreateAudienceGroupRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateAudienceGroupRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateAudienceGroupRequest other)
        {
            if (other is null)
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (
                    Description == other.Description
                    || Description != null && Description.Equals(other.Description)
                )
                && (
                    IsIfaAudience == other.IsIfaAudience
                    || IsIfaAudience.Equals(other.IsIfaAudience)
                )
                && (
                    UploadDescription == other.UploadDescription
                    || UploadDescription != null
                        && UploadDescription.Equals(other.UploadDescription)
                )
                && (
                    Audiences == other.Audiences
                    || Audiences != null
                        && other.Audiences != null
                        && Audiences.SequenceEqual(other.Audiences)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();

                hashCode = hashCode * 59 + IsIfaAudience.GetHashCode();
                if (UploadDescription != null)
                    hashCode = hashCode * 59 + UploadDescription.GetHashCode();
                if (Audiences != null)
                    hashCode = hashCode * 59 + Audiences.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(
            CreateAudienceGroupRequest left,
            CreateAudienceGroupRequest right
        )
        {
            return Equals(left, right);
        }

        public static bool operator !=(
            CreateAudienceGroupRequest left,
            CreateAudienceGroupRequest right
        )
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
