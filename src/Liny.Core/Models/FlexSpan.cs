/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class FlexSpan : FlexComponent, IEquatable<FlexSpan>
    {
        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public string Size { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name = "color", EmitDefaultValue = false)]
        public string Color { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>

        public enum WeightEnum
        {
            /// <summary>
            /// Enum RegularEnum for regular
            /// </summary>
            [EnumMember(Value = "regular")]
            RegularEnum = 1,

            /// <summary>
            /// Enum BoldEnum for bold
            /// </summary>
            [EnumMember(Value = "bold")]
            BoldEnum = 2,
        }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name = "weight", EmitDefaultValue = true)]
        public WeightEnum Weight { get; set; }

        /// <summary>
        /// Gets or Sets Style
        /// </summary>

        public enum StyleEnum
        {
            /// <summary>
            /// Enum NormalEnum for normal
            /// </summary>
            [EnumMember(Value = "normal")]
            NormalEnum = 1,

            /// <summary>
            /// Enum ItalicEnum for italic
            /// </summary>
            [EnumMember(Value = "italic")]
            ItalicEnum = 2,
        }

        /// <summary>
        /// Gets or Sets Style
        /// </summary>
        [DataMember(Name = "style", EmitDefaultValue = true)]
        public StyleEnum Style { get; set; }

        /// <summary>
        /// Gets or Sets Decoration
        /// </summary>

        public enum DecorationEnum
        {
            /// <summary>
            /// Enum NoneEnum for none
            /// </summary>
            [EnumMember(Value = "none")]
            NoneEnum = 1,

            /// <summary>
            /// Enum UnderlineEnum for underline
            /// </summary>
            [EnumMember(Value = "underline")]
            UnderlineEnum = 2,

            /// <summary>
            /// Enum LineThroughEnum for line-through
            /// </summary>
            [EnumMember(Value = "line-through")]
            LineThroughEnum = 3,
        }

        /// <summary>
        /// Gets or Sets Decoration
        /// </summary>
        [DataMember(Name = "decoration", EmitDefaultValue = true)]
        public DecorationEnum Decoration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlexSpan {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("  Decoration: ").Append(Decoration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions { WriteIndented = true };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((FlexSpan)obj);
        }

        /// <summary>
        /// Returns true if FlexSpan instances are equal
        /// </summary>
        /// <param name="other">Instance of FlexSpan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlexSpan other)
        {
            if (other is null)
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (Text == other.Text || Text != null && Text.Equals(other.Text))
                && (Size == other.Size || Size != null && Size.Equals(other.Size))
                && (Color == other.Color || Color != null && Color.Equals(other.Color))
                && (Weight == other.Weight || Weight.Equals(other.Weight))
                && (Style == other.Style || Style.Equals(other.Style))
                && (Decoration == other.Decoration || Decoration.Equals(other.Decoration));
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                if (Size != null)
                    hashCode = hashCode * 59 + Size.GetHashCode();
                if (Color != null)
                    hashCode = hashCode * 59 + Color.GetHashCode();

                hashCode = hashCode * 59 + Weight.GetHashCode();

                hashCode = hashCode * 59 + Style.GetHashCode();

                hashCode = hashCode * 59 + Decoration.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(FlexSpan left, FlexSpan right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FlexSpan left, FlexSpan right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
