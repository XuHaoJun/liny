/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{
    /// <summary>
    /// Issued stateless channel access token
    /// </summary>
    [DataContract]
    public partial class IssueStatelessChannelAccessTokenResponse
        : IEquatable<IssueStatelessChannelAccessTokenResponse>
    {
        /// <summary>
        /// A stateless channel access token. The token is an opaque string which means its format is an implementation detail and the consumer of this token should never try to use the data parsed from the token.
        /// </summary>
        /// <value>A stateless channel access token. The token is an opaque string which means its format is an implementation detail and the consumer of this token should never try to use the data parsed from the token. </value>
        [Required]
        [DataMember(Name = "access_token", EmitDefaultValue = false)]
        public string AccessToken { get; set; }

        /// <summary>
        /// Duration in seconds after which the issued access token expires
        /// </summary>
        /// <value>Duration in seconds after which the issued access token expires</value>
        [Required]
        [DataMember(Name = "expires_in", EmitDefaultValue = true)]
        public int ExpiresIn { get; set; }

        /// <summary>
        /// Token type. The value is always &#x60;Bearer&#x60;.
        /// </summary>
        /// <value>Token type. The value is always &#x60;Bearer&#x60;.</value>
        [Required]
        [DataMember(Name = "token_type", EmitDefaultValue = false)]
        public string TokenType { get; set; } = "Bearer";

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IssueStatelessChannelAccessTokenResponse {\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions { WriteIndented = true };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType()
                && Equals((IssueStatelessChannelAccessTokenResponse)obj);
        }

        /// <summary>
        /// Returns true if IssueStatelessChannelAccessTokenResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of IssueStatelessChannelAccessTokenResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssueStatelessChannelAccessTokenResponse other)
        {
            if (other is null)
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (
                    AccessToken == other.AccessToken
                    || AccessToken != null && AccessToken.Equals(other.AccessToken)
                )
                && (ExpiresIn == other.ExpiresIn || ExpiresIn.Equals(other.ExpiresIn))
                && (
                    TokenType == other.TokenType
                    || TokenType != null && TokenType.Equals(other.TokenType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (AccessToken != null)
                    hashCode = hashCode * 59 + AccessToken.GetHashCode();

                hashCode = hashCode * 59 + ExpiresIn.GetHashCode();
                if (TokenType != null)
                    hashCode = hashCode * 59 + TokenType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(
            IssueStatelessChannelAccessTokenResponse left,
            IssueStatelessChannelAccessTokenResponse right
        )
        {
            return Equals(left, right);
        }

        public static bool operator !=(
            IssueStatelessChannelAccessTokenResponse left,
            IssueStatelessChannelAccessTokenResponse right
        )
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
