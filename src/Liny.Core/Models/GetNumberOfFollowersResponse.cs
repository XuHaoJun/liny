/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{ 
    /// <summary>
    /// Get number of followers
    /// </summary>
    [DataContract]
    public partial class GetNumberOfFollowersResponse : IEquatable<GetNumberOfFollowersResponse>
    {

        /// <summary>
        /// Calculation status.
        /// </summary>
        /// <value>Calculation status.</value>
        
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum ReadyEnum for ready
            /// </summary>
            [EnumMember(Value = "ready")]
            ReadyEnum = 1,
            
            /// <summary>
            /// Enum UnreadyEnum for unready
            /// </summary>
            [EnumMember(Value = "unready")]
            UnreadyEnum = 2,
            
            /// <summary>
            /// Enum OutOfServiceEnum for out_of_service
            /// </summary>
            [EnumMember(Value = "out_of_service")]
            OutOfServiceEnum = 3
        }

        /// <summary>
        /// Calculation status.
        /// </summary>
        /// <value>Calculation status.</value>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// The number of times, as of the specified date, that a user added this LINE Official Account as a friend for the first time. The number doesn&#39;t decrease even if a user later blocks the account or when they delete their LINE account. 
        /// </summary>
        /// <value>The number of times, as of the specified date, that a user added this LINE Official Account as a friend for the first time. The number doesn&#39;t decrease even if a user later blocks the account or when they delete their LINE account. </value>
        [DataMember(Name="followers", EmitDefaultValue=true)]
        public long Followers { get; set; }

        /// <summary>
        /// The number of users, as of the specified date, that the LINE Official Account can reach through targeted messages based on gender, age, and/or region. This number only includes users who are active on LINE or LINE services and whose demographics have a high level of certainty. 
        /// </summary>
        /// <value>The number of users, as of the specified date, that the LINE Official Account can reach through targeted messages based on gender, age, and/or region. This number only includes users who are active on LINE or LINE services and whose demographics have a high level of certainty. </value>
        [DataMember(Name="targetedReaches", EmitDefaultValue=true)]
        public long TargetedReaches { get; set; }

        /// <summary>
        /// The number of users blocking the account as of the specified date. The number decreases when a user unblocks the account.   
        /// </summary>
        /// <value>The number of users blocking the account as of the specified date. The number decreases when a user unblocks the account.   </value>
        [DataMember(Name="blocks", EmitDefaultValue=true)]
        public long Blocks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetNumberOfFollowersResponse {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Followers: ").Append(Followers).Append("\n");
            sb.Append("  TargetedReaches: ").Append(TargetedReaches).Append("\n");
            sb.Append("  Blocks: ").Append(Blocks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GetNumberOfFollowersResponse)obj);
        }

        /// <summary>
        /// Returns true if GetNumberOfFollowersResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of GetNumberOfFollowersResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetNumberOfFollowersResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    Followers == other.Followers ||
                    
                    Followers.Equals(other.Followers)
                ) && 
                (
                    TargetedReaches == other.TargetedReaches ||
                    
                    TargetedReaches.Equals(other.TargetedReaches)
                ) && 
                (
                    Blocks == other.Blocks ||
                    
                    Blocks.Equals(other.Blocks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    
                    hashCode = hashCode * 59 + Followers.GetHashCode();
                    
                    hashCode = hashCode * 59 + TargetedReaches.GetHashCode();
                    
                    hashCode = hashCode * 59 + Blocks.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GetNumberOfFollowersResponse left, GetNumberOfFollowersResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GetNumberOfFollowersResponse left, GetNumberOfFollowersResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
