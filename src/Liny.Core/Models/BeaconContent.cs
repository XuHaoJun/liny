/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class BeaconContent : IEquatable<BeaconContent>
    {
        /// <summary>
        /// Hardware ID of the beacon that was detected
        /// </summary>
        /// <value>Hardware ID of the beacon that was detected</value>
        [Required]
        [DataMember(Name = "hwid", EmitDefaultValue = false)]
        public string Hwid { get; set; }

        /// <summary>
        /// Type of beacon event.
        /// </summary>
        /// <value>Type of beacon event.</value>

        public enum TypeEnum
        {
            /// <summary>
            /// Enum EnterEnum for enter
            /// </summary>
            [EnumMember(Value = "enter")]
            EnterEnum = 1,

            /// <summary>
            /// Enum BannerEnum for banner
            /// </summary>
            [EnumMember(Value = "banner")]
            BannerEnum = 2,

            /// <summary>
            /// Enum StayEnum for stay
            /// </summary>
            [EnumMember(Value = "stay")]
            StayEnum = 3,
        }

        /// <summary>
        /// Type of beacon event.
        /// </summary>
        /// <value>Type of beacon event.</value>
        [Required]
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Device message of beacon that was detected.
        /// </summary>
        /// <value>Device message of beacon that was detected.</value>
        [DataMember(Name = "dm", EmitDefaultValue = false)]
        public string Dm { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BeaconContent {\n");
            sb.Append("  Hwid: ").Append(Hwid).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Dm: ").Append(Dm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions { WriteIndented = true };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((BeaconContent)obj);
        }

        /// <summary>
        /// Returns true if BeaconContent instances are equal
        /// </summary>
        /// <param name="other">Instance of BeaconContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BeaconContent other)
        {
            if (other is null)
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (Hwid == other.Hwid || Hwid != null && Hwid.Equals(other.Hwid))
                && (Type == other.Type || Type.Equals(other.Type))
                && (Dm == other.Dm || Dm != null && Dm.Equals(other.Dm));
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Hwid != null)
                    hashCode = hashCode * 59 + Hwid.GetHashCode();

                hashCode = hashCode * 59 + Type.GetHashCode();
                if (Dm != null)
                    hashCode = hashCode * 59 + Dm.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(BeaconContent left, BeaconContent right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BeaconContent left, BeaconContent right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
