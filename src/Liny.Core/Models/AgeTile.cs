/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class AgeTile : IEquatable<AgeTile>
    {
        /// <summary>
        /// users' age
        /// </summary>
        /// <value>users' age</value>

        public enum AgeEnum
        {
            /// <summary>
            /// Enum From0to14Enum for from0to14
            /// </summary>
            [EnumMember(Value = "from0to14")]
            From0to14Enum = 1,

            /// <summary>
            /// Enum From15to19Enum for from15to19
            /// </summary>
            [EnumMember(Value = "from15to19")]
            From15to19Enum = 2,

            /// <summary>
            /// Enum From20to24Enum for from20to24
            /// </summary>
            [EnumMember(Value = "from20to24")]
            From20to24Enum = 3,

            /// <summary>
            /// Enum From25to29Enum for from25to29
            /// </summary>
            [EnumMember(Value = "from25to29")]
            From25to29Enum = 4,

            /// <summary>
            /// Enum From30to34Enum for from30to34
            /// </summary>
            [EnumMember(Value = "from30to34")]
            From30to34Enum = 5,

            /// <summary>
            /// Enum From35to39Enum for from35to39
            /// </summary>
            [EnumMember(Value = "from35to39")]
            From35to39Enum = 6,

            /// <summary>
            /// Enum From40to44Enum for from40to44
            /// </summary>
            [EnumMember(Value = "from40to44")]
            From40to44Enum = 7,

            /// <summary>
            /// Enum From45to49Enum for from45to49
            /// </summary>
            [EnumMember(Value = "from45to49")]
            From45to49Enum = 8,

            /// <summary>
            /// Enum From50Enum for from50
            /// </summary>
            [EnumMember(Value = "from50")]
            From50Enum = 9,

            /// <summary>
            /// Enum From50to54Enum for from50to54
            /// </summary>
            [EnumMember(Value = "from50to54")]
            From50to54Enum = 10,

            /// <summary>
            /// Enum From55to59Enum for from55to59
            /// </summary>
            [EnumMember(Value = "from55to59")]
            From55to59Enum = 11,

            /// <summary>
            /// Enum From60to64Enum for from60to64
            /// </summary>
            [EnumMember(Value = "from60to64")]
            From60to64Enum = 12,

            /// <summary>
            /// Enum From65to69Enum for from65to69
            /// </summary>
            [EnumMember(Value = "from65to69")]
            From65to69Enum = 13,

            /// <summary>
            /// Enum From70Enum for from70
            /// </summary>
            [EnumMember(Value = "from70")]
            From70Enum = 14,

            /// <summary>
            /// Enum UnknownEnum for unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            UnknownEnum = 15,
        }

        /// <summary>
        /// users&#39; age
        /// </summary>
        /// <value>users&#39; age</value>
        [DataMember(Name = "age", EmitDefaultValue = true)]
        public AgeEnum Age { get; set; }

        /// <summary>
        /// Percentage
        /// </summary>
        /// <value>Percentage</value>
        [DataMember(Name = "percentage", EmitDefaultValue = true)]
        public double Percentage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AgeTile {\n");
            sb.Append("  Age: ").Append(Age).Append("\n");
            sb.Append("  Percentage: ").Append(Percentage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions { WriteIndented = true };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((AgeTile)obj);
        }

        /// <summary>
        /// Returns true if AgeTile instances are equal
        /// </summary>
        /// <param name="other">Instance of AgeTile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AgeTile other)
        {
            if (other is null)
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (Age == other.Age || Age.Equals(other.Age))
                && (Percentage == other.Percentage || Percentage.Equals(other.Percentage));
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)

                hashCode = hashCode * 59 + Age.GetHashCode();

                hashCode = hashCode * 59 + Percentage.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(AgeTile left, AgeTile right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AgeTile left, AgeTile right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
