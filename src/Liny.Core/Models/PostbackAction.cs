/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class PostbackAction : Action, IEquatable<PostbackAction>
    {
        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [StringLength(300, MinimumLength = 0)]
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public string Data { get; set; }

        /// <summary>
        /// Gets or Sets DisplayText
        /// </summary>
        [DataMember(Name = "displayText", EmitDefaultValue = false)]
        public string DisplayText { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets InputOption
        /// </summary>

        public enum InputOptionEnum
        {
            /// <summary>
            /// Enum CloseRichMenuEnum for closeRichMenu
            /// </summary>
            [EnumMember(Value = "closeRichMenu")]
            CloseRichMenuEnum = 1,

            /// <summary>
            /// Enum OpenRichMenuEnum for openRichMenu
            /// </summary>
            [EnumMember(Value = "openRichMenu")]
            OpenRichMenuEnum = 2,

            /// <summary>
            /// Enum OpenKeyboardEnum for openKeyboard
            /// </summary>
            [EnumMember(Value = "openKeyboard")]
            OpenKeyboardEnum = 3,

            /// <summary>
            /// Enum OpenVoiceEnum for openVoice
            /// </summary>
            [EnumMember(Value = "openVoice")]
            OpenVoiceEnum = 4,
        }

        /// <summary>
        /// Gets or Sets InputOption
        /// </summary>
        [DataMember(Name = "inputOption", EmitDefaultValue = true)]
        public InputOptionEnum InputOption { get; set; }

        /// <summary>
        /// Gets or Sets FillInText
        /// </summary>
        [DataMember(Name = "fillInText", EmitDefaultValue = false)]
        public string FillInText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostbackAction {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  DisplayText: ").Append(DisplayText).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  InputOption: ").Append(InputOption).Append("\n");
            sb.Append("  FillInText: ").Append(FillInText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions { WriteIndented = true };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((PostbackAction)obj);
        }

        /// <summary>
        /// Returns true if PostbackAction instances are equal
        /// </summary>
        /// <param name="other">Instance of PostbackAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostbackAction other)
        {
            if (other is null)
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (Data == other.Data || Data != null && Data.Equals(other.Data))
                && (
                    DisplayText == other.DisplayText
                    || DisplayText != null && DisplayText.Equals(other.DisplayText)
                )
                && (Text == other.Text || Text != null && Text.Equals(other.Text))
                && (InputOption == other.InputOption || InputOption.Equals(other.InputOption))
                && (
                    FillInText == other.FillInText
                    || FillInText != null && FillInText.Equals(other.FillInText)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Data != null)
                    hashCode = hashCode * 59 + Data.GetHashCode();
                if (DisplayText != null)
                    hashCode = hashCode * 59 + DisplayText.GetHashCode();
                if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();

                hashCode = hashCode * 59 + InputOption.GetHashCode();
                if (FillInText != null)
                    hashCode = hashCode * 59 + FillInText.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(PostbackAction left, PostbackAction right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PostbackAction left, PostbackAction right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
