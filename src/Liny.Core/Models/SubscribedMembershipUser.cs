/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{
    /// <summary>
    /// Object containing user membership subscription information.
    /// </summary>
    [DataContract]
    public partial class SubscribedMembershipUser : IEquatable<SubscribedMembershipUser>
    {
        /// <summary>
        /// The user&#39;s member number in the membership plan.
        /// </summary>
        /// <value>The user&#39;s member number in the membership plan.</value>
        [Required]
        [DataMember(Name = "membershipNo", EmitDefaultValue = true)]
        public int MembershipNo { get; set; }

        /// <summary>
        /// UNIX timestamp at which the user subscribed to the membership.
        /// </summary>
        /// <value>UNIX timestamp at which the user subscribed to the membership.</value>
        [Required]
        [DataMember(Name = "joinedTime", EmitDefaultValue = true)]
        public int JoinedTime { get; set; }

        /// <summary>
        /// Next payment date for membership plan. - Format: yyyy-MM-dd (e.g. 2024-02-08) - Timezone: UTC+9
        /// </summary>
        /// <value>Next payment date for membership plan. - Format: yyyy-MM-dd (e.g. 2024-02-08) - Timezone: UTC+9 </value>
        [Required]
        [DataMember(Name = "nextBillingDate", EmitDefaultValue = false)]
        public string NextBillingDate { get; set; }

        /// <summary>
        /// The period of time in months that the user has been subscribed to a membership plan. If a user previously canceled and then re-subscribed to the same membership plan, only the period after the re-subscription will be counted.
        /// </summary>
        /// <value>The period of time in months that the user has been subscribed to a membership plan. If a user previously canceled and then re-subscribed to the same membership plan, only the period after the re-subscription will be counted.</value>
        [Required]
        [DataMember(Name = "totalSubscriptionMonths", EmitDefaultValue = true)]
        public int TotalSubscriptionMonths { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscribedMembershipUser {\n");
            sb.Append("  MembershipNo: ").Append(MembershipNo).Append("\n");
            sb.Append("  JoinedTime: ").Append(JoinedTime).Append("\n");
            sb.Append("  NextBillingDate: ").Append(NextBillingDate).Append("\n");
            sb.Append("  TotalSubscriptionMonths: ").Append(TotalSubscriptionMonths).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions { WriteIndented = true };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((SubscribedMembershipUser)obj);
        }

        /// <summary>
        /// Returns true if SubscribedMembershipUser instances are equal
        /// </summary>
        /// <param name="other">Instance of SubscribedMembershipUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscribedMembershipUser other)
        {
            if (other is null)
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (MembershipNo == other.MembershipNo || MembershipNo.Equals(other.MembershipNo))
                && (JoinedTime == other.JoinedTime || JoinedTime.Equals(other.JoinedTime))
                && (
                    NextBillingDate == other.NextBillingDate
                    || NextBillingDate != null && NextBillingDate.Equals(other.NextBillingDate)
                )
                && (
                    TotalSubscriptionMonths == other.TotalSubscriptionMonths
                    || TotalSubscriptionMonths.Equals(other.TotalSubscriptionMonths)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)

                hashCode = hashCode * 59 + MembershipNo.GetHashCode();

                hashCode = hashCode * 59 + JoinedTime.GetHashCode();
                if (NextBillingDate != null)
                    hashCode = hashCode * 59 + NextBillingDate.GetHashCode();

                hashCode = hashCode * 59 + TotalSubscriptionMonths.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(
            SubscribedMembershipUser left,
            SubscribedMembershipUser right
        )
        {
            return Equals(left, right);
        }

        public static bool operator !=(
            SubscribedMembershipUser left,
            SubscribedMembershipUser right
        )
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
