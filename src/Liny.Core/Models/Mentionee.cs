/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using JsonSubTypes;
using Liny.Core.Converters;
using Swashbuckle.AspNetCore.Annotations;

namespace Liny.Core.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    [SwaggerDiscriminator("Type")]
    [JsonSubtypes.KnownSubType(typeof(AllMentionee), "all")]
    [SwaggerSubType(typeof(AllMentionee), DiscriminatorValue = "all")]
    [JsonSubtypes.KnownSubType(typeof(UserMentionee), "user")]
    [SwaggerSubType(typeof(UserMentionee), DiscriminatorValue = "user")]
    public partial class Mentionee : IEquatable<Mentionee>
    {
        /// <summary>
        /// Mentioned target.
        /// </summary>
        /// <value>Mentioned target.</value>
        [Required]
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Index position of the user mention for a character in text, with the first character being at position 0.
        /// </summary>
        /// <value>Index position of the user mention for a character in text, with the first character being at position 0.</value>
        [Required]
        [DataMember(Name = "index", EmitDefaultValue = true)]
        public int Index { get; set; }

        /// <summary>
        /// The length of the text of the mentioned user. For a mention @example, 8 is the length.
        /// </summary>
        /// <value>The length of the text of the mentioned user. For a mention @example, 8 is the length.</value>
        [Required]
        [DataMember(Name = "length", EmitDefaultValue = true)]
        public int Length { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Mentionee {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions { WriteIndented = true };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((Mentionee)obj);
        }

        /// <summary>
        /// Returns true if Mentionee instances are equal
        /// </summary>
        /// <param name="other">Instance of Mentionee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Mentionee other)
        {
            if (other is null)
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (Type == other.Type || Type != null && Type.Equals(other.Type))
                && (Index == other.Index || Index.Equals(other.Index))
                && (Length == other.Length || Length.Equals(other.Length));
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();

                hashCode = hashCode * 59 + Index.GetHashCode();

                hashCode = hashCode * 59 + Length.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Mentionee left, Mentionee right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Mentionee left, Mentionee right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
