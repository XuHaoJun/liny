/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using JsonSubTypes;
using Swashbuckle.AspNetCore.Annotations;
using Liny.Core.Converters;

namespace Liny.Core.Models
{ 
    /// <summary>
    /// Action
    /// </summary>
    [DataContract]
    [SwaggerDiscriminator("Type")]
    [JsonSubtypes.KnownSubType(typeof(CameraAction), "camera")]
    [SwaggerSubType(typeof(CameraAction), DiscriminatorValue =  "camera")]
    [JsonSubtypes.KnownSubType(typeof(CameraRollAction), "cameraRoll")]
    [SwaggerSubType(typeof(CameraRollAction), DiscriminatorValue =  "cameraRoll")]
    [JsonSubtypes.KnownSubType(typeof(ClipboardAction), "clipboard")]
    [SwaggerSubType(typeof(ClipboardAction), DiscriminatorValue =  "clipboard")]
    [JsonSubtypes.KnownSubType(typeof(DatetimePickerAction), "datetimepicker")]
    [SwaggerSubType(typeof(DatetimePickerAction), DiscriminatorValue =  "datetimepicker")]
    [JsonSubtypes.KnownSubType(typeof(LocationAction), "location")]
    [SwaggerSubType(typeof(LocationAction), DiscriminatorValue =  "location")]
    [JsonSubtypes.KnownSubType(typeof(MessageAction), "message")]
    [SwaggerSubType(typeof(MessageAction), DiscriminatorValue =  "message")]
    [JsonSubtypes.KnownSubType(typeof(PostbackAction), "postback")]
    [SwaggerSubType(typeof(PostbackAction), DiscriminatorValue =  "postback")]
    [JsonSubtypes.KnownSubType(typeof(RichMenuSwitchAction), "richmenuswitch")]
    [SwaggerSubType(typeof(RichMenuSwitchAction), DiscriminatorValue =  "richmenuswitch")]
    [JsonSubtypes.KnownSubType(typeof(URIAction), "uri")]
    [SwaggerSubType(typeof(URIAction), DiscriminatorValue =  "uri")]
    public partial class Action : IEquatable<Action>
    {
        /// <summary>
        /// Type of action
        /// </summary>
        /// <value>Type of action</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Label for the action.
        /// </summary>
        /// <value>Label for the action.</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Action {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Action)obj);
        }

        /// <summary>
        /// Returns true if Action instances are equal
        /// </summary>
        /// <param name="other">Instance of Action to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Action other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Label == other.Label ||
                    Label != null &&
                    Label.Equals(other.Label)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Label != null)
                    hashCode = hashCode * 59 + Label.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Action left, Action right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Action left, Action right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
