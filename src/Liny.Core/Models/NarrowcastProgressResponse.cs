/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using Liny.Core.Converters;

namespace Liny.Core.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class NarrowcastProgressResponse : IEquatable<NarrowcastProgressResponse>
    {
        /// <summary>
        /// The current status. One of:  `waiting`: Messages are not yet ready to be sent. They are currently being filtered or processed in some way. `sending`: Messages are currently being sent. `succeeded`: Messages were sent successfully. This may not mean the messages were successfully received. `failed`: Messages failed to be sent. Use the failedDescription property to find the cause of the failure.
        /// </summary>
        /// <value>The current status. One of:  `waiting`: Messages are not yet ready to be sent. They are currently being filtered or processed in some way. `sending`: Messages are currently being sent. `succeeded`: Messages were sent successfully. This may not mean the messages were successfully received. `failed`: Messages failed to be sent. Use the failedDescription property to find the cause of the failure. </value>

        public enum PhaseEnum
        {
            /// <summary>
            /// Enum WaitingEnum for waiting
            /// </summary>
            [EnumMember(Value = "waiting")]
            WaitingEnum = 1,

            /// <summary>
            /// Enum SendingEnum for sending
            /// </summary>
            [EnumMember(Value = "sending")]
            SendingEnum = 2,

            /// <summary>
            /// Enum SucceededEnum for succeeded
            /// </summary>
            [EnumMember(Value = "succeeded")]
            SucceededEnum = 3,

            /// <summary>
            /// Enum FailedEnum for failed
            /// </summary>
            [EnumMember(Value = "failed")]
            FailedEnum = 4,
        }

        /// <summary>
        /// The current status. One of:  &#x60;waiting&#x60;: Messages are not yet ready to be sent. They are currently being filtered or processed in some way. &#x60;sending&#x60;: Messages are currently being sent. &#x60;succeeded&#x60;: Messages were sent successfully. This may not mean the messages were successfully received. &#x60;failed&#x60;: Messages failed to be sent. Use the failedDescription property to find the cause of the failure.
        /// </summary>
        /// <value>The current status. One of:  &#x60;waiting&#x60;: Messages are not yet ready to be sent. They are currently being filtered or processed in some way. &#x60;sending&#x60;: Messages are currently being sent. &#x60;succeeded&#x60;: Messages were sent successfully. This may not mean the messages were successfully received. &#x60;failed&#x60;: Messages failed to be sent. Use the failedDescription property to find the cause of the failure. </value>
        [Required]
        [DataMember(Name = "phase", EmitDefaultValue = true)]
        public PhaseEnum Phase { get; set; }

        /// <summary>
        /// The number of users who successfully received the message.
        /// </summary>
        /// <value>The number of users who successfully received the message.</value>
        [DataMember(Name = "successCount", EmitDefaultValue = true)]
        public long SuccessCount { get; set; }

        /// <summary>
        /// The number of users who failed to send the message.
        /// </summary>
        /// <value>The number of users who failed to send the message.</value>
        [DataMember(Name = "failureCount", EmitDefaultValue = true)]
        public long FailureCount { get; set; }

        /// <summary>
        /// The number of intended recipients of the message.
        /// </summary>
        /// <value>The number of intended recipients of the message.</value>
        [DataMember(Name = "targetCount", EmitDefaultValue = true)]
        public long TargetCount { get; set; }

        /// <summary>
        /// The reason the message failed to be sent. This is only included with a &#x60;phase&#x60; property value of &#x60;failed&#x60;.
        /// </summary>
        /// <value>The reason the message failed to be sent. This is only included with a &#x60;phase&#x60; property value of &#x60;failed&#x60;.</value>
        [DataMember(Name = "failedDescription", EmitDefaultValue = false)]
        public string FailedDescription { get; set; }

        /// <summary>
        /// Error summary. This is only included with a phase property value of failed. One of:  &#x60;1&#x60;: An internal error occurred. &#x60;2&#x60;: An error occurred because there weren&#39;t enough recipients. &#x60;3&#x60;: A conflict error of requests occurs because a request that has already been accepted is retried. &#x60;4&#x60;: An audience of less than 50 recipients is included as a condition of sending.
        /// </summary>
        /// <value>Error summary. This is only included with a phase property value of failed. One of:  &#x60;1&#x60;: An internal error occurred. &#x60;2&#x60;: An error occurred because there weren&#39;t enough recipients. &#x60;3&#x60;: A conflict error of requests occurs because a request that has already been accepted is retried. &#x60;4&#x60;: An audience of less than 50 recipients is included as a condition of sending. </value>
        [DataMember(Name = "errorCode", EmitDefaultValue = true)]
        public long ErrorCode { get; set; }

        /// <summary>
        /// Narrowcast message request accepted time in milliseconds.  Format: ISO 8601 (e.g. 2020-12-03T10:15:30.121Z) Timezone: UTC
        /// </summary>
        /// <value>Narrowcast message request accepted time in milliseconds.  Format: ISO 8601 (e.g. 2020-12-03T10:15:30.121Z) Timezone: UTC </value>
        [Required]
        [DataMember(Name = "acceptedTime", EmitDefaultValue = true)]
        public DateTime AcceptedTime { get; set; }

        /// <summary>
        /// Processing of narrowcast message request completion time in milliseconds. Returned when the phase property is succeeded or failed.  Format: ISO 8601 (e.g. 2020-12-03T10:15:30.121Z) Timezone: UTC
        /// </summary>
        /// <value>Processing of narrowcast message request completion time in milliseconds. Returned when the phase property is succeeded or failed.  Format: ISO 8601 (e.g. 2020-12-03T10:15:30.121Z) Timezone: UTC </value>
        [DataMember(Name = "completedTime", EmitDefaultValue = true)]
        public DateTime CompletedTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NarrowcastProgressResponse {\n");
            sb.Append("  Phase: ").Append(Phase).Append("\n");
            sb.Append("  SuccessCount: ").Append(SuccessCount).Append("\n");
            sb.Append("  FailureCount: ").Append(FailureCount).Append("\n");
            sb.Append("  TargetCount: ").Append(TargetCount).Append("\n");
            sb.Append("  FailedDescription: ").Append(FailedDescription).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  AcceptedTime: ").Append(AcceptedTime).Append("\n");
            sb.Append("  CompletedTime: ").Append(CompletedTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions { WriteIndented = true };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((NarrowcastProgressResponse)obj);
        }

        /// <summary>
        /// Returns true if NarrowcastProgressResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of NarrowcastProgressResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NarrowcastProgressResponse other)
        {
            if (other is null)
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (Phase == other.Phase || Phase.Equals(other.Phase))
                && (SuccessCount == other.SuccessCount || SuccessCount.Equals(other.SuccessCount))
                && (FailureCount == other.FailureCount || FailureCount.Equals(other.FailureCount))
                && (TargetCount == other.TargetCount || TargetCount.Equals(other.TargetCount))
                && (
                    FailedDescription == other.FailedDescription
                    || FailedDescription != null
                        && FailedDescription.Equals(other.FailedDescription)
                )
                && (ErrorCode == other.ErrorCode || ErrorCode.Equals(other.ErrorCode))
                && (AcceptedTime == other.AcceptedTime || AcceptedTime.Equals(other.AcceptedTime))
                && (
                    CompletedTime == other.CompletedTime
                    || CompletedTime.Equals(other.CompletedTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)

                hashCode = hashCode * 59 + Phase.GetHashCode();

                hashCode = hashCode * 59 + SuccessCount.GetHashCode();

                hashCode = hashCode * 59 + FailureCount.GetHashCode();

                hashCode = hashCode * 59 + TargetCount.GetHashCode();
                if (FailedDescription != null)
                    hashCode = hashCode * 59 + FailedDescription.GetHashCode();

                hashCode = hashCode * 59 + ErrorCode.GetHashCode();

                hashCode = hashCode * 59 + AcceptedTime.GetHashCode();

                hashCode = hashCode * 59 + CompletedTime.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(
            NarrowcastProgressResponse left,
            NarrowcastProgressResponse right
        )
        {
            return Equals(left, right);
        }

        public static bool operator !=(
            NarrowcastProgressResponse left,
            NarrowcastProgressResponse right
        )
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
