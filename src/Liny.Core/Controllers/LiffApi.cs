/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using System.Text.Json;
using Liny.Core.Attributes;
using Liny.Core.Models;

namespace Liny.Core.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class LiffApiController : ControllerBase
    { 
        /// <summary>
        /// Create LIFF app
        /// </summary>
        /// <remarks>Adding the LIFF app to a channel</remarks>
        /// <param name="addLiffAppRequest"></param>
        /// <response code="200">OK</response>
        /// <response code="400">This status code means one of the following: - The request contains an invalid value. - The maximum number of LIFF apps that can be added to the channel has been reached. </response>
        /// <response code="401">Authentication failed.  </response>
        [HttpPost]
        [Route("/liff/v1/apps")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("AddLIFFApp")]
        [SwaggerResponse(statusCode: 200, type: typeof(AddLiffAppResponse), description: "OK")]
        public virtual IActionResult AddLIFFApp([FromBody]AddLiffAppRequest addLiffAppRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AddLiffAppResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "{\n  \"liffId\" : \"liffId\"\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<AddLiffAppResponse>(exampleJson)
            : default(AddLiffAppResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete LIFF app from a channel
        /// </summary>
        /// <remarks>Deletes a LIFF app from a channel. </remarks>
        /// <param name="liffId">ID of the LIFF app to be updated</param>
        /// <response code="200">OK</response>
        /// <response code="401">Authentication failed. </response>
        /// <response code="404">This status code means one of the following: - The specified LIFF app does not exist. - The specified LIFF app has been added to another channel.  </response>
        [HttpDelete]
        [Route("/liff/v1/apps/{liffId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteLIFFApp")]
        public virtual IActionResult DeleteLIFFApp([FromRoute (Name = "liffId")][Required]string liffId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get all LIFF apps
        /// </summary>
        /// <remarks>Gets information on all the LIFF apps added to the channel.</remarks>
        /// <response code="200">OK</response>
        /// <response code="401">Authentication failed. </response>
        /// <response code="404">There is no LIFF app on the channel.    </response>
        [HttpGet]
        [Route("/liff/v1/apps")]
        [ValidateModelState]
        [SwaggerOperation("GetAllLIFFApps")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetAllLiffAppsResponse), description: "OK")]
        public virtual IActionResult GetAllLIFFApps()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetAllLiffAppsResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"apps\" : [ {\n    \"features\" : {\n      \"qrCode\" : false,\n      \"ble\" : true\n    },\n    \"view\" : {\n      \"moduleMode\" : true,\n      \"type\" : \"compact\",\n      \"url\" : \"https://openapi-generator.tech\"\n    },\n    \"scope\" : [ \"openid\", \"openid\" ],\n    \"description\" : \"description\",\n    \"liffId\" : \"liffId\",\n    \"permanentLinkPattern\" : \"permanentLinkPattern\",\n    \"botPrompt\" : \"normal\"\n  }, {\n    \"features\" : {\n      \"qrCode\" : false,\n      \"ble\" : true\n    },\n    \"view\" : {\n      \"moduleMode\" : true,\n      \"type\" : \"compact\",\n      \"url\" : \"https://openapi-generator.tech\"\n    },\n    \"scope\" : [ \"openid\", \"openid\" ],\n    \"description\" : \"description\",\n    \"liffId\" : \"liffId\",\n    \"permanentLinkPattern\" : \"permanentLinkPattern\",\n    \"botPrompt\" : \"normal\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<GetAllLiffAppsResponse>(exampleJson)
            : default(GetAllLiffAppsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update LIFF app from a channel
        /// </summary>
        /// <remarks>Update LIFF app settings</remarks>
        /// <param name="liffId">ID of the LIFF app to be updated</param>
        /// <param name="updateLiffAppRequest"></param>
        /// <response code="200">OK</response>
        /// <response code="400">The request contains an invalid value. </response>
        /// <response code="401">Authentication failed. </response>
        /// <response code="404">This status code means one of the following: - The specified LIFF app does not exist. - The specified LIFF app has been added to another channel. </response>
        [HttpPut]
        [Route("/liff/v1/apps/{liffId}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateLIFFApp")]
        public virtual IActionResult UpdateLIFFApp([FromRoute (Name = "liffId")][Required]string liffId, [FromBody]UpdateLiffAppRequest updateLiffAppRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }
    }
}
