/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json;
using Liny.Core.Attributes;
using Liny.Core.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;

namespace Liny.Core.Controllers
{
    /// <summary>
    ///
    /// </summary>
    [ApiController]
    public class MessagingApiApiController : ControllerBase
    {
        /// <summary>
        ///
        /// </summary>
        /// <remarks>Sends a message to multiple users at any time.</remarks>
        /// <param name="broadcastRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key. </param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Forbidden</response>
        /// <response code="409">Conflict</response>
        /// <response code="429">Too Many Requests</response>
        [HttpPost]
        [Route("/v2/bot/message/broadcast")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("Broadcast")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorResponse), description: "Forbidden")]
        [SwaggerResponse(statusCode: 409, type: typeof(ErrorResponse), description: "Conflict")]
        [SwaggerResponse(
            statusCode: 429,
            type: typeof(ErrorResponse),
            description: "Too Many Requests"
        )]
        public virtual IActionResult Broadcast(
            [FromBody] BroadcastRequest broadcastRequest,
            [FromHeader(Name = "X-Line-Retry-Key")] Guid? xLineRetryKey
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429, default(ErrorResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"details\" : [ {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  }, {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  } ],\n  \"message\" : \"message\",\n  \"sentMessages\" : [ {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  } ]\n}";
            exampleJson =
                "{\n  \"details\" : [ {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  }, {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  } ],\n  \"message\" : \"message\",\n  \"sentMessages\" : [ {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  } ]\n}";
            exampleJson =
                "{\n  \"details\" : [ {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  }, {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  } ],\n  \"message\" : \"message\",\n  \"sentMessages\" : [ {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  } ]\n}";
            exampleJson =
                "{\n  \"details\" : [ {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  }, {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  } ],\n  \"message\" : \"message\",\n  \"sentMessages\" : [ {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  } ]\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<Object>(exampleJson)
                    : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Cancel default rich menu</remarks>
        /// <response code="200">OK</response>
        [HttpDelete]
        [Route("/v2/bot/user/all/richmenu")]
        [ValidateModelState]
        [SwaggerOperation("CancelDefaultRichMenu")]
        public virtual IActionResult CancelDefaultRichMenu()
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Create rich menu</remarks>
        /// <param name="richMenuRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v2/bot/richmenu")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateRichMenu")]
        [SwaggerResponse(statusCode: 200, type: typeof(RichMenuIdResponse), description: "OK")]
        public virtual IActionResult CreateRichMenu([FromBody] RichMenuRequest richMenuRequest)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RichMenuIdResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"richMenuId\" : \"richMenuId\"\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<RichMenuIdResponse>(exampleJson)
                    : default(RichMenuIdResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Create rich menu alias</remarks>
        /// <param name="createRichMenuAliasRequest"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        [HttpPost]
        [Route("/v2/bot/richmenu/alias")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateRichMenuAlias")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        public virtual IActionResult CreateRichMenuAlias(
            [FromBody] CreateRichMenuAliasRequest createRichMenuAliasRequest
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Deletes a rich menu.</remarks>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <response code="200">OK</response>
        [HttpDelete]
        [Route("/v2/bot/richmenu/{richMenuId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteRichMenu")]
        public virtual IActionResult DeleteRichMenu(
            [FromRoute(Name = "richMenuId")] [Required] string richMenuId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Delete rich menu alias</remarks>
        /// <param name="richMenuAliasId">Rich menu alias ID that you want to delete.</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        [HttpDelete]
        [Route("/v2/bot/richmenu/alias/{richMenuAliasId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteRichMenuAlias")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        public virtual IActionResult DeleteRichMenuAlias(
            [FromRoute(Name = "richMenuAliasId")] [Required] string richMenuAliasId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Get name list of units used this month</remarks>
        /// <param name="limit">The maximum number of aggregation units you can get per request. </param>
        /// <param name="start">Value of the continuation token found in the next property of the JSON object returned in the response. If you can&#39;t get all the aggregation units in one request, include this parameter to get the remaining array. </param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/message/aggregation/list")]
        [ValidateModelState]
        [SwaggerOperation("GetAggregationUnitNameList")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(GetAggregationUnitNameListResponse),
            description: "OK"
        )]
        public virtual IActionResult GetAggregationUnitNameList(
            [FromQuery(Name = "limit")] string limit,
            [FromQuery(Name = "start")] string start
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetAggregationUnitNameListResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"next\" : \"next\",\n  \"customAggregationUnits\" : [ \"customAggregationUnits\", \"customAggregationUnits\" ]\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<GetAggregationUnitNameListResponse>(exampleJson)
                    : default(GetAggregationUnitNameListResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Get number of units used this month</remarks>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/message/aggregation/info")]
        [ValidateModelState]
        [SwaggerOperation("GetAggregationUnitUsage")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(GetAggregationUnitUsageResponse),
            description: "OK"
        )]
        public virtual IActionResult GetAggregationUnitUsage()
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetAggregationUnitUsageResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"numOfCustomAggregationUnits\" : 0\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<GetAggregationUnitUsageResponse>(exampleJson)
                    : default(GetAggregationUnitUsageResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Get bot info</remarks>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/info")]
        [ValidateModelState]
        [SwaggerOperation("GetBotInfo")]
        [SwaggerResponse(statusCode: 200, type: typeof(BotInfoResponse), description: "OK")]
        public virtual IActionResult GetBotInfo()
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(BotInfoResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"chatMode\" : \"chat\",\n  \"markAsReadMode\" : \"auto\",\n  \"displayName\" : \"displayName\",\n  \"basicId\" : \"basicId\",\n  \"pictureUrl\" : \"https://openapi-generator.tech\",\n  \"premiumId\" : \"premiumId\",\n  \"userId\" : \"userId\"\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<BotInfoResponse>(exampleJson)
                    : default(BotInfoResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Gets the ID of the default rich menu set with the Messaging API.</remarks>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/user/all/richmenu")]
        [ValidateModelState]
        [SwaggerOperation("GetDefaultRichMenuId")]
        [SwaggerResponse(statusCode: 200, type: typeof(RichMenuIdResponse), description: "OK")]
        public virtual IActionResult GetDefaultRichMenuId()
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RichMenuIdResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"richMenuId\" : \"richMenuId\"\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<RichMenuIdResponse>(exampleJson)
                    : default(RichMenuIdResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Get a list of users who added your LINE Official Account as a friend</remarks>
        /// <param name="start">Value of the continuation token found in the next property of the JSON object returned in the response. Include this parameter to get the next array of user IDs. </param>
        /// <param name="limit">The maximum number of user IDs to retrieve in a single request.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/followers/ids")]
        [ValidateModelState]
        [SwaggerOperation("GetFollowers")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetFollowersResponse), description: "OK")]
        public virtual IActionResult GetFollowers(
            [FromQuery(Name = "start")] string start,
            [FromQuery(Name = "limit")] int? limit
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetFollowersResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"next\" : \"next\",\n  \"userIds\" : [ \"userIds\", \"userIds\", \"userIds\", \"userIds\", \"userIds\" ]\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<GetFollowersResponse>(exampleJson)
                    : default(GetFollowersResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Get number of users in a group chat</remarks>
        /// <param name="groupId">Group ID</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/group/{groupId}/members/count")]
        [ValidateModelState]
        [SwaggerOperation("GetGroupMemberCount")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(GroupMemberCountResponse),
            description: "OK"
        )]
        public virtual IActionResult GetGroupMemberCount(
            [FromRoute(Name = "groupId")] [Required] string groupId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GroupMemberCountResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"count\" : 0\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<GroupMemberCountResponse>(exampleJson)
                    : default(GroupMemberCountResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Get group chat member profile</remarks>
        /// <param name="groupId">Group ID</param>
        /// <param name="userId">User ID</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/group/{groupId}/member/{userId}")]
        [ValidateModelState]
        [SwaggerOperation("GetGroupMemberProfile")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(GroupUserProfileResponse),
            description: "OK"
        )]
        public virtual IActionResult GetGroupMemberProfile(
            [FromRoute(Name = "groupId")] [Required] string groupId,
            [FromRoute(Name = "userId")] [Required] string userId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GroupUserProfileResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"displayName\" : \"displayName\",\n  \"pictureUrl\" : \"https://openapi-generator.tech\",\n  \"userId\" : \"userId\"\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<GroupUserProfileResponse>(exampleJson)
                    : default(GroupUserProfileResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Get group chat member user IDs</remarks>
        /// <param name="groupId">Group ID</param>
        /// <param name="start">Value of the continuation token found in the &#x60;next&#x60; property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group. </param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/group/{groupId}/members/ids")]
        [ValidateModelState]
        [SwaggerOperation("GetGroupMembersIds")]
        [SwaggerResponse(statusCode: 200, type: typeof(MembersIdsResponse), description: "OK")]
        public virtual IActionResult GetGroupMembersIds(
            [FromRoute(Name = "groupId")] [Required] string groupId,
            [FromQuery(Name = "start")] string start
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MembersIdsResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"next\" : \"next\",\n  \"memberIds\" : [ \"memberIds\", \"memberIds\", \"memberIds\", \"memberIds\", \"memberIds\" ]\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<MembersIdsResponse>(exampleJson)
                    : default(MembersIdsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Get group chat summary</remarks>
        /// <param name="groupId">Group ID</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/group/{groupId}/summary")]
        [ValidateModelState]
        [SwaggerOperation("GetGroupSummary")]
        [SwaggerResponse(statusCode: 200, type: typeof(GroupSummaryResponse), description: "OK")]
        public virtual IActionResult GetGroupSummary(
            [FromRoute(Name = "groupId")] [Required] string groupId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GroupSummaryResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"groupName\" : \"groupName\",\n  \"groupId\" : \"groupId\",\n  \"pictureUrl\" : \"https://openapi-generator.tech\"\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<GroupSummaryResponse>(exampleJson)
                    : default(GroupSummaryResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Get a list of memberships.</remarks>
        /// <response code="200">OK</response>
        /// <response code="404">Unable to get information about the memberships.</response>
        [HttpGet]
        [Route("/v2/bot/membership/list")]
        [ValidateModelState]
        [SwaggerOperation("GetMembershipList")]
        [SwaggerResponse(statusCode: 200, type: typeof(MembershipListResponse), description: "OK")]
        [SwaggerResponse(
            statusCode: 404,
            type: typeof(ErrorResponse),
            description: "Unable to get information about the memberships."
        )]
        public virtual IActionResult GetMembershipList()
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MembershipListResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"memberships\" : [ {\n    \"benefits\" : [ \"benefits\", \"benefits\" ],\n    \"price\" : 500.0,\n    \"isPublished\" : true,\n    \"memberCount\" : 100,\n    \"description\" : \"description\",\n    \"currency\" : \"JPY\",\n    \"membershipId\" : 0,\n    \"isInAppPurchase\" : true,\n    \"title\" : \"title\",\n    \"memberLimit\" : 1000\n  }, {\n    \"benefits\" : [ \"benefits\", \"benefits\" ],\n    \"price\" : 500.0,\n    \"isPublished\" : true,\n    \"memberCount\" : 100,\n    \"description\" : \"description\",\n    \"currency\" : \"JPY\",\n    \"membershipId\" : 0,\n    \"isInAppPurchase\" : true,\n    \"title\" : \"title\",\n    \"memberLimit\" : 1000\n  } ]\n}";
            exampleJson =
                "{\n  \"details\" : [ {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  }, {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  } ],\n  \"message\" : \"message\",\n  \"sentMessages\" : [ {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  } ]\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<MembershipListResponse>(exampleJson)
                    : default(MembershipListResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Get a user&#39;s membership subscription.</remarks>
        /// <param name="userId">User ID</param>
        /// <response code="200">OK</response>
        /// <response code="400">An invalid user ID is specified.</response>
        /// <response code="404">Unable to get information about the membership to which the user subscribes.</response>
        [HttpGet]
        [Route("/v2/bot/membership/subscription/{userId}")]
        [ValidateModelState]
        [SwaggerOperation("GetMembershipSubscription")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(GetMembershipSubscriptionResponse),
            description: "OK"
        )]
        [SwaggerResponse(
            statusCode: 400,
            type: typeof(ErrorResponse),
            description: "An invalid user ID is specified."
        )]
        [SwaggerResponse(
            statusCode: 404,
            type: typeof(ErrorResponse),
            description: "Unable to get information about the membership to which the user subscribes."
        )]
        public virtual IActionResult GetMembershipSubscription(
            [FromRoute(Name = "userId")] [Required] string userId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetMembershipSubscriptionResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"subscriptions\" : [ {\n    \"membership\" : {\n      \"benefits\" : [ \"benefits\", \"benefits\" ],\n      \"price\" : 500.0,\n      \"description\" : \"description\",\n      \"currency\" : \"JPY\",\n      \"membershipId\" : 0,\n      \"title\" : \"title\"\n    },\n    \"user\" : {\n      \"totalSubscriptionMonths\" : 5,\n      \"nextBillingDate\" : \"nextBillingDate\",\n      \"joinedTime\" : 1,\n      \"membershipNo\" : 6\n    }\n  }, {\n    \"membership\" : {\n      \"benefits\" : [ \"benefits\", \"benefits\" ],\n      \"price\" : 500.0,\n      \"description\" : \"description\",\n      \"currency\" : \"JPY\",\n      \"membershipId\" : 0,\n      \"title\" : \"title\"\n    },\n    \"user\" : {\n      \"totalSubscriptionMonths\" : 5,\n      \"nextBillingDate\" : \"nextBillingDate\",\n      \"joinedTime\" : 1,\n      \"membershipNo\" : 6\n    }\n  } ]\n}";
            exampleJson =
                "{\n  \"details\" : [ {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  }, {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  } ],\n  \"message\" : \"message\",\n  \"sentMessages\" : [ {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  } ]\n}";
            exampleJson =
                "{\n  \"details\" : [ {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  }, {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  } ],\n  \"message\" : \"message\",\n  \"sentMessages\" : [ {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  } ]\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<GetMembershipSubscriptionResponse>(exampleJson)
                    : default(GetMembershipSubscriptionResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Gets the target limit for sending messages in the current month. The total number of the free messages and the additional messages is returned.</remarks>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/message/quota")]
        [ValidateModelState]
        [SwaggerOperation("GetMessageQuota")]
        [SwaggerResponse(statusCode: 200, type: typeof(MessageQuotaResponse), description: "OK")]
        public virtual IActionResult GetMessageQuota()
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MessageQuotaResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"type\" : \"none\",\n  \"value\" : 0\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<MessageQuotaResponse>(exampleJson)
                    : default(MessageQuotaResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Gets the number of messages sent in the current month.</remarks>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/message/quota/consumption")]
        [ValidateModelState]
        [SwaggerOperation("GetMessageQuotaConsumption")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(QuotaConsumptionResponse),
            description: "OK"
        )]
        public virtual IActionResult GetMessageQuotaConsumption()
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(QuotaConsumptionResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"totalUsage\" : 0\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<QuotaConsumptionResponse>(exampleJson)
                    : default(QuotaConsumptionResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Gets the status of a narrowcast message.</remarks>
        /// <param name="requestId">The narrowcast message&#39;s request ID. Each Messaging API request has a request ID.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/message/progress/narrowcast")]
        [ValidateModelState]
        [SwaggerOperation("GetNarrowcastProgress")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(NarrowcastProgressResponse),
            description: "OK"
        )]
        public virtual IActionResult GetNarrowcastProgress(
            [FromQuery(Name = "requestId")] [Required()] string requestId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(NarrowcastProgressResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"phase\" : \"waiting\",\n  \"acceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"completedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"failedDescription\" : \"failedDescription\",\n  \"successCount\" : 0,\n  \"errorCode\" : 5,\n  \"targetCount\" : 1,\n  \"failureCount\" : 6\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<NarrowcastProgressResponse>(exampleJson)
                    : default(NarrowcastProgressResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Get number of sent broadcast messages</remarks>
        /// <param name="date">Date the messages were sent  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9 </param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/message/delivery/broadcast")]
        [ValidateModelState]
        [SwaggerOperation("GetNumberOfSentBroadcastMessages")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(NumberOfMessagesResponse),
            description: "OK"
        )]
        public virtual IActionResult GetNumberOfSentBroadcastMessages(
            [FromQuery(Name = "date")] [Required()] string date
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(NumberOfMessagesResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"success\" : 0,\n  \"status\" : \"ready\"\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<NumberOfMessagesResponse>(exampleJson)
                    : default(NumberOfMessagesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Get number of sent multicast messages</remarks>
        /// <param name="date">Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 </param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/message/delivery/multicast")]
        [ValidateModelState]
        [SwaggerOperation("GetNumberOfSentMulticastMessages")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(NumberOfMessagesResponse),
            description: "OK"
        )]
        public virtual IActionResult GetNumberOfSentMulticastMessages(
            [FromQuery(Name = "date")] [Required()] string date
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(NumberOfMessagesResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"success\" : 0,\n  \"status\" : \"ready\"\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<NumberOfMessagesResponse>(exampleJson)
                    : default(NumberOfMessagesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Get number of sent push messages</remarks>
        /// <param name="date">Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 </param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/message/delivery/push")]
        [ValidateModelState]
        [SwaggerOperation("GetNumberOfSentPushMessages")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(NumberOfMessagesResponse),
            description: "OK"
        )]
        public virtual IActionResult GetNumberOfSentPushMessages(
            [FromQuery(Name = "date")] [Required()] string date
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(NumberOfMessagesResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"success\" : 0,\n  \"status\" : \"ready\"\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<NumberOfMessagesResponse>(exampleJson)
                    : default(NumberOfMessagesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Get number of sent reply messages</remarks>
        /// <param name="date">Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 </param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/message/delivery/reply")]
        [ValidateModelState]
        [SwaggerOperation("GetNumberOfSentReplyMessages")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(NumberOfMessagesResponse),
            description: "OK"
        )]
        public virtual IActionResult GetNumberOfSentReplyMessages(
            [FromQuery(Name = "date")] [Required()] string date
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(NumberOfMessagesResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"success\" : 0,\n  \"status\" : \"ready\"\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<NumberOfMessagesResponse>(exampleJson)
                    : default(NumberOfMessagesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Get number of sent LINE notification messages　</remarks>
        /// <param name="date">Date the message was sent  Format: &#x60;yyyyMMdd&#x60; (Example:&#x60;20211231&#x60;) Time zone: UTC+9 </param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/message/delivery/pnp")]
        [ValidateModelState]
        [SwaggerOperation("GetPNPMessageStatistics")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(NumberOfMessagesResponse),
            description: "OK"
        )]
        public virtual IActionResult GetPNPMessageStatistics(
            [FromQuery(Name = "date")] [Required()] [RegularExpression("^[0-9]{8}$")] string date
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(NumberOfMessagesResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"success\" : 0,\n  \"status\" : \"ready\"\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<NumberOfMessagesResponse>(exampleJson)
                    : default(NumberOfMessagesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Get profile</remarks>
        /// <param name="userId">User ID</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/profile/{userId}")]
        [ValidateModelState]
        [SwaggerOperation("GetProfile")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserProfileResponse), description: "OK")]
        public virtual IActionResult GetProfile(
            [FromRoute(Name = "userId")] [Required] string userId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserProfileResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"displayName\" : \"displayName\",\n  \"pictureUrl\" : \"https://openapi-generator.tech\",\n  \"language\" : \"en\",\n  \"userId\" : \"userId\",\n  \"statusMessage\" : \"statusMessage\"\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<UserProfileResponse>(exampleJson)
                    : default(UserProfileResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Gets a rich menu via a rich menu ID.</remarks>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/richmenu/{richMenuId}")]
        [ValidateModelState]
        [SwaggerOperation("GetRichMenu")]
        [SwaggerResponse(statusCode: 200, type: typeof(RichMenuResponse), description: "OK")]
        public virtual IActionResult GetRichMenu(
            [FromRoute(Name = "richMenuId")] [Required] string richMenuId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RichMenuResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"size\" : {\n    \"width\" : 171976545,\n    \"height\" : 1294386359\n  },\n  \"chatBarText\" : \"chatBarText\",\n  \"name\" : \"name\",\n  \"areas\" : [ {\n    \"bounds\" : {\n      \"x\" : 314780940,\n      \"width\" : 1210617418,\n      \"y\" : 1280358508,\n      \"height\" : 494379917\n    },\n    \"action\" : {\n      \"label\" : \"label\",\n      \"type\" : \"type\"\n    }\n  }, {\n    \"bounds\" : {\n      \"x\" : 314780940,\n      \"width\" : 1210617418,\n      \"y\" : 1280358508,\n      \"height\" : 494379917\n    },\n    \"action\" : {\n      \"label\" : \"label\",\n      \"type\" : \"type\"\n    }\n  }, {\n    \"bounds\" : {\n      \"x\" : 314780940,\n      \"width\" : 1210617418,\n      \"y\" : 1280358508,\n      \"height\" : 494379917\n    },\n    \"action\" : {\n      \"label\" : \"label\",\n      \"type\" : \"type\"\n    }\n  }, {\n    \"bounds\" : {\n      \"x\" : 314780940,\n      \"width\" : 1210617418,\n      \"y\" : 1280358508,\n      \"height\" : 494379917\n    },\n    \"action\" : {\n      \"label\" : \"label\",\n      \"type\" : \"type\"\n    }\n  }, {\n    \"bounds\" : {\n      \"x\" : 314780940,\n      \"width\" : 1210617418,\n      \"y\" : 1280358508,\n      \"height\" : 494379917\n    },\n    \"action\" : {\n      \"label\" : \"label\",\n      \"type\" : \"type\"\n    }\n  } ],\n  \"richMenuId\" : \"richMenuId\",\n  \"selected\" : true\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<RichMenuResponse>(exampleJson)
                    : default(RichMenuResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Get rich menu alias information</remarks>
        /// <param name="richMenuAliasId">The rich menu alias ID whose information you want to obtain.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/richmenu/alias/{richMenuAliasId}")]
        [ValidateModelState]
        [SwaggerOperation("GetRichMenuAlias")]
        [SwaggerResponse(statusCode: 200, type: typeof(RichMenuAliasResponse), description: "OK")]
        public virtual IActionResult GetRichMenuAlias(
            [FromRoute(Name = "richMenuAliasId")] [Required] string richMenuAliasId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RichMenuAliasResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"richMenuId\" : \"richMenuId\",\n  \"richMenuAliasId\" : \"richMenuAliasId\"\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<RichMenuAliasResponse>(exampleJson)
                    : default(RichMenuAliasResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Get list of rich menu alias</remarks>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/richmenu/alias/list")]
        [ValidateModelState]
        [SwaggerOperation("GetRichMenuAliasList")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(RichMenuAliasListResponse),
            description: "OK"
        )]
        public virtual IActionResult GetRichMenuAliasList()
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RichMenuAliasListResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"aliases\" : [ {\n    \"richMenuId\" : \"richMenuId\",\n    \"richMenuAliasId\" : \"richMenuAliasId\"\n  }, {\n    \"richMenuId\" : \"richMenuId\",\n    \"richMenuAliasId\" : \"richMenuAliasId\"\n  } ]\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<RichMenuAliasListResponse>(exampleJson)
                    : default(RichMenuAliasListResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Get the status of Replace or unlink a linked rich menus in batches.</remarks>
        /// <param name="requestId">A request ID used to batch control the rich menu linked to the user. Each Messaging API request has a request ID.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/richmenu/progress/batch")]
        [ValidateModelState]
        [SwaggerOperation("GetRichMenuBatchProgress")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(RichMenuBatchProgressResponse),
            description: "OK"
        )]
        public virtual IActionResult GetRichMenuBatchProgress(
            [FromQuery(Name = "requestId")] [Required()] string requestId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RichMenuBatchProgressResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"phase\" : \"ongoing\",\n  \"acceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"completedTime\" : \"2000-01-23T04:56:07.000+00:00\"\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<RichMenuBatchProgressResponse>(exampleJson)
                    : default(RichMenuBatchProgressResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Get rich menu ID of user</remarks>
        /// <param name="userId">User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/user/{userId}/richmenu")]
        [ValidateModelState]
        [SwaggerOperation("GetRichMenuIdOfUser")]
        [SwaggerResponse(statusCode: 200, type: typeof(RichMenuIdResponse), description: "OK")]
        public virtual IActionResult GetRichMenuIdOfUser(
            [FromRoute(Name = "userId")] [Required] string userId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RichMenuIdResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"richMenuId\" : \"richMenuId\"\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<RichMenuIdResponse>(exampleJson)
                    : default(RichMenuIdResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Get rich menu list</remarks>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/richmenu/list")]
        [ValidateModelState]
        [SwaggerOperation("GetRichMenuList")]
        [SwaggerResponse(statusCode: 200, type: typeof(RichMenuListResponse), description: "OK")]
        public virtual IActionResult GetRichMenuList()
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RichMenuListResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"richmenus\" : [ {\n    \"size\" : {\n      \"width\" : 171976545,\n      \"height\" : 1294386359\n    },\n    \"chatBarText\" : \"chatBarText\",\n    \"name\" : \"name\",\n    \"areas\" : [ {\n      \"bounds\" : {\n        \"x\" : 314780940,\n        \"width\" : 1210617418,\n        \"y\" : 1280358508,\n        \"height\" : 494379917\n      },\n      \"action\" : {\n        \"label\" : \"label\",\n        \"type\" : \"type\"\n      }\n    }, {\n      \"bounds\" : {\n        \"x\" : 314780940,\n        \"width\" : 1210617418,\n        \"y\" : 1280358508,\n        \"height\" : 494379917\n      },\n      \"action\" : {\n        \"label\" : \"label\",\n        \"type\" : \"type\"\n      }\n    }, {\n      \"bounds\" : {\n        \"x\" : 314780940,\n        \"width\" : 1210617418,\n        \"y\" : 1280358508,\n        \"height\" : 494379917\n      },\n      \"action\" : {\n        \"label\" : \"label\",\n        \"type\" : \"type\"\n      }\n    }, {\n      \"bounds\" : {\n        \"x\" : 314780940,\n        \"width\" : 1210617418,\n        \"y\" : 1280358508,\n        \"height\" : 494379917\n      },\n      \"action\" : {\n        \"label\" : \"label\",\n        \"type\" : \"type\"\n      }\n    }, {\n      \"bounds\" : {\n        \"x\" : 314780940,\n        \"width\" : 1210617418,\n        \"y\" : 1280358508,\n        \"height\" : 494379917\n      },\n      \"action\" : {\n        \"label\" : \"label\",\n        \"type\" : \"type\"\n      }\n    } ],\n    \"richMenuId\" : \"richMenuId\",\n    \"selected\" : true\n  }, {\n    \"size\" : {\n      \"width\" : 171976545,\n      \"height\" : 1294386359\n    },\n    \"chatBarText\" : \"chatBarText\",\n    \"name\" : \"name\",\n    \"areas\" : [ {\n      \"bounds\" : {\n        \"x\" : 314780940,\n        \"width\" : 1210617418,\n        \"y\" : 1280358508,\n        \"height\" : 494379917\n      },\n      \"action\" : {\n        \"label\" : \"label\",\n        \"type\" : \"type\"\n      }\n    }, {\n      \"bounds\" : {\n        \"x\" : 314780940,\n        \"width\" : 1210617418,\n        \"y\" : 1280358508,\n        \"height\" : 494379917\n      },\n      \"action\" : {\n        \"label\" : \"label\",\n        \"type\" : \"type\"\n      }\n    }, {\n      \"bounds\" : {\n        \"x\" : 314780940,\n        \"width\" : 1210617418,\n        \"y\" : 1280358508,\n        \"height\" : 494379917\n      },\n      \"action\" : {\n        \"label\" : \"label\",\n        \"type\" : \"type\"\n      }\n    }, {\n      \"bounds\" : {\n        \"x\" : 314780940,\n        \"width\" : 1210617418,\n        \"y\" : 1280358508,\n        \"height\" : 494379917\n      },\n      \"action\" : {\n        \"label\" : \"label\",\n        \"type\" : \"type\"\n      }\n    }, {\n      \"bounds\" : {\n        \"x\" : 314780940,\n        \"width\" : 1210617418,\n        \"y\" : 1280358508,\n        \"height\" : 494379917\n      },\n      \"action\" : {\n        \"label\" : \"label\",\n        \"type\" : \"type\"\n      }\n    } ],\n    \"richMenuId\" : \"richMenuId\",\n    \"selected\" : true\n  } ]\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<RichMenuListResponse>(exampleJson)
                    : default(RichMenuListResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Get number of users in a multi-person chat</remarks>
        /// <param name="roomId">Room ID</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/room/{roomId}/members/count")]
        [ValidateModelState]
        [SwaggerOperation("GetRoomMemberCount")]
        [SwaggerResponse(statusCode: 200, type: typeof(RoomMemberCountResponse), description: "OK")]
        public virtual IActionResult GetRoomMemberCount(
            [FromRoute(Name = "roomId")] [Required] string roomId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RoomMemberCountResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"count\" : 0\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<RoomMemberCountResponse>(exampleJson)
                    : default(RoomMemberCountResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Get multi-person chat member profile</remarks>
        /// <param name="roomId">Room ID</param>
        /// <param name="userId">User ID</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/room/{roomId}/member/{userId}")]
        [ValidateModelState]
        [SwaggerOperation("GetRoomMemberProfile")]
        [SwaggerResponse(statusCode: 200, type: typeof(RoomUserProfileResponse), description: "OK")]
        public virtual IActionResult GetRoomMemberProfile(
            [FromRoute(Name = "roomId")] [Required] string roomId,
            [FromRoute(Name = "userId")] [Required] string userId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RoomUserProfileResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"displayName\" : \"displayName\",\n  \"pictureUrl\" : \"https://openapi-generator.tech\",\n  \"userId\" : \"userId\"\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<RoomUserProfileResponse>(exampleJson)
                    : default(RoomUserProfileResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Get multi-person chat member user IDs</remarks>
        /// <param name="roomId">Room ID</param>
        /// <param name="start">Value of the continuation token found in the &#x60;next&#x60; property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group. </param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/room/{roomId}/members/ids")]
        [ValidateModelState]
        [SwaggerOperation("GetRoomMembersIds")]
        [SwaggerResponse(statusCode: 200, type: typeof(MembersIdsResponse), description: "OK")]
        public virtual IActionResult GetRoomMembersIds(
            [FromRoute(Name = "roomId")] [Required] string roomId,
            [FromQuery(Name = "start")] string start
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MembersIdsResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"next\" : \"next\",\n  \"memberIds\" : [ \"memberIds\", \"memberIds\", \"memberIds\", \"memberIds\", \"memberIds\" ]\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<MembersIdsResponse>(exampleJson)
                    : default(MembersIdsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Get webhook endpoint information</remarks>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/channel/webhook/endpoint")]
        [ValidateModelState]
        [SwaggerOperation("GetWebhookEndpoint")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(GetWebhookEndpointResponse),
            description: "OK"
        )]
        public virtual IActionResult GetWebhookEndpoint()
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetWebhookEndpointResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"endpoint\" : \"https://openapi-generator.tech\",\n  \"active\" : true\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<GetWebhookEndpointResponse>(exampleJson)
                    : default(GetWebhookEndpointResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Issue link token</remarks>
        /// <param name="userId">User ID for the LINE account to be linked. Found in the &#x60;source&#x60; object of account link event objects. Do not use the LINE ID used in LINE. </param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v2/bot/user/{userId}/linkToken")]
        [ValidateModelState]
        [SwaggerOperation("IssueLinkToken")]
        [SwaggerResponse(statusCode: 200, type: typeof(IssueLinkTokenResponse), description: "OK")]
        public virtual IActionResult IssueLinkToken(
            [FromRoute(Name = "userId")] [Required] string userId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(IssueLinkTokenResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"linkToken\" : \"linkToken\"\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<IssueLinkTokenResponse>(exampleJson)
                    : default(IssueLinkTokenResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Leave group chat</remarks>
        /// <param name="groupId">Group ID</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/v2/bot/group/{groupId}/leave")]
        [ValidateModelState]
        [SwaggerOperation("LeaveGroup")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        public virtual IActionResult LeaveGroup(
            [FromRoute(Name = "groupId")] [Required] string groupId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Leave multi-person chat</remarks>
        /// <param name="roomId">Room ID</param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v2/bot/room/{roomId}/leave")]
        [ValidateModelState]
        [SwaggerOperation("LeaveRoom")]
        public virtual IActionResult LeaveRoom(
            [FromRoute(Name = "roomId")] [Required] string roomId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Link rich menu to user.</remarks>
        /// <param name="userId">User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.</param>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v2/bot/user/{userId}/richmenu/{richMenuId}")]
        [ValidateModelState]
        [SwaggerOperation("LinkRichMenuIdToUser")]
        public virtual IActionResult LinkRichMenuIdToUser(
            [FromRoute(Name = "userId")] [Required] string userId,
            [FromRoute(Name = "richMenuId")] [Required] string richMenuId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Link rich menu to multiple users</remarks>
        /// <param name="richMenuBulkLinkRequest"></param>
        /// <response code="202">Accepted</response>
        [HttpPost]
        [Route("/v2/bot/richmenu/bulk/link")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("LinkRichMenuIdToUsers")]
        public virtual IActionResult LinkRichMenuIdToUsers(
            [FromBody] RichMenuBulkLinkRequest richMenuBulkLinkRequest
        )
        {
            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202);

            throw new NotImplementedException();
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Mark messages from users as read</remarks>
        /// <param name="markMessagesAsReadRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v2/bot/message/markAsRead")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("MarkMessagesAsRead")]
        public virtual IActionResult MarkMessagesAsRead(
            [FromBody] MarkMessagesAsReadRequest markMessagesAsReadRequest
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>An API that efficiently sends the same message to multiple user IDs. You can&#39;t send messages to group chats or multi-person chats.</remarks>
        /// <param name="multicastRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key. </param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Forbidden</response>
        /// <response code="409">Conflict</response>
        /// <response code="429">Too Many Requests</response>
        [HttpPost]
        [Route("/v2/bot/message/multicast")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("Multicast")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorResponse), description: "Forbidden")]
        [SwaggerResponse(statusCode: 409, type: typeof(ErrorResponse), description: "Conflict")]
        [SwaggerResponse(
            statusCode: 429,
            type: typeof(ErrorResponse),
            description: "Too Many Requests"
        )]
        public virtual IActionResult Multicast(
            [FromBody] MulticastRequest multicastRequest,
            [FromHeader(Name = "X-Line-Retry-Key")] Guid? xLineRetryKey
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429, default(ErrorResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"details\" : [ {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  }, {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  } ],\n  \"message\" : \"message\",\n  \"sentMessages\" : [ {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  } ]\n}";
            exampleJson =
                "{\n  \"details\" : [ {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  }, {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  } ],\n  \"message\" : \"message\",\n  \"sentMessages\" : [ {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  } ]\n}";
            exampleJson =
                "{\n  \"details\" : [ {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  }, {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  } ],\n  \"message\" : \"message\",\n  \"sentMessages\" : [ {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  } ]\n}";
            exampleJson =
                "{\n  \"details\" : [ {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  }, {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  } ],\n  \"message\" : \"message\",\n  \"sentMessages\" : [ {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  } ]\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<Object>(exampleJson)
                    : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Send narrowcast message</remarks>
        /// <param name="narrowcastRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key. </param>
        /// <response code="202">Accepted</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Forbidden</response>
        /// <response code="409">Conflict</response>
        /// <response code="429">Too Many Requests</response>
        [HttpPost]
        [Route("/v2/bot/message/narrowcast")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("Narrowcast")]
        [SwaggerResponse(statusCode: 202, type: typeof(Object), description: "Accepted")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorResponse), description: "Forbidden")]
        [SwaggerResponse(statusCode: 409, type: typeof(ErrorResponse), description: "Conflict")]
        [SwaggerResponse(
            statusCode: 429,
            type: typeof(ErrorResponse),
            description: "Too Many Requests"
        )]
        public virtual IActionResult Narrowcast(
            [FromBody] NarrowcastRequest narrowcastRequest,
            [FromHeader(Name = "X-Line-Retry-Key")] Guid? xLineRetryKey
        )
        {
            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202, default(Object));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429, default(ErrorResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"details\" : [ {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  }, {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  } ],\n  \"message\" : \"message\",\n  \"sentMessages\" : [ {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  } ]\n}";
            exampleJson =
                "{\n  \"details\" : [ {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  }, {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  } ],\n  \"message\" : \"message\",\n  \"sentMessages\" : [ {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  } ]\n}";
            exampleJson =
                "{\n  \"details\" : [ {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  }, {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  } ],\n  \"message\" : \"message\",\n  \"sentMessages\" : [ {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  } ]\n}";
            exampleJson =
                "{\n  \"details\" : [ {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  }, {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  } ],\n  \"message\" : \"message\",\n  \"sentMessages\" : [ {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  } ]\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<Object>(exampleJson)
                    : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Sends a message to a user, group chat, or multi-person chat at any time.</remarks>
        /// <param name="pushMessageRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key. </param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Forbidden</response>
        /// <response code="409">Conflict</response>
        /// <response code="429">Too Many Requests</response>
        [HttpPost]
        [Route("/v2/bot/message/push")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PushMessage")]
        [SwaggerResponse(statusCode: 200, type: typeof(PushMessageResponse), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorResponse), description: "Forbidden")]
        [SwaggerResponse(statusCode: 409, type: typeof(ErrorResponse), description: "Conflict")]
        [SwaggerResponse(
            statusCode: 429,
            type: typeof(ErrorResponse),
            description: "Too Many Requests"
        )]
        public virtual IActionResult PushMessage(
            [FromBody] PushMessageRequest pushMessageRequest,
            [FromHeader(Name = "X-Line-Retry-Key")] Guid? xLineRetryKey
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PushMessageResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429, default(ErrorResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"sentMessages\" : [ {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  } ]\n}";
            exampleJson =
                "{\n  \"details\" : [ {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  }, {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  } ],\n  \"message\" : \"message\",\n  \"sentMessages\" : [ {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  } ]\n}";
            exampleJson =
                "{\n  \"details\" : [ {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  }, {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  } ],\n  \"message\" : \"message\",\n  \"sentMessages\" : [ {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  } ]\n}";
            exampleJson =
                "{\n  \"details\" : [ {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  }, {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  } ],\n  \"message\" : \"message\",\n  \"sentMessages\" : [ {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  } ]\n}";
            exampleJson =
                "{\n  \"details\" : [ {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  }, {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  } ],\n  \"message\" : \"message\",\n  \"sentMessages\" : [ {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  } ]\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<PushMessageResponse>(exampleJson)
                    : default(PushMessageResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Send LINE notification message</remarks>
        /// <param name="pnpMessagesRequest"></param>
        /// <param name="xLineDeliveryTag">String returned in the delivery.data property of the delivery completion event via Webhook.</param>
        /// <response code="200">OK</response>
        /// <response code="422">Unprocessable Entity</response>
        [HttpPost]
        [Route("/bot/pnp/push")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PushMessagesByPhone")]
        [SwaggerResponse(
            statusCode: 422,
            type: typeof(ErrorResponse),
            description: "Unprocessable Entity"
        )]
        public virtual IActionResult PushMessagesByPhone(
            [FromBody] PnpMessagesRequest pnpMessagesRequest,
            [FromHeader(Name = "X-Line-Delivery-Tag")]
            [StringLength(100, MinimumLength = 16)]
                string xLineDeliveryTag
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Send reply message</remarks>
        /// <param name="replyMessageRequest"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad request</response>
        /// <response code="429">Too Many Requests</response>
        [HttpPost]
        [Route("/v2/bot/message/reply")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ReplyMessage")]
        [SwaggerResponse(statusCode: 200, type: typeof(ReplyMessageResponse), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad request")]
        [SwaggerResponse(
            statusCode: 429,
            type: typeof(ErrorResponse),
            description: "Too Many Requests"
        )]
        public virtual IActionResult ReplyMessage(
            [FromBody] ReplyMessageRequest replyMessageRequest
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ReplyMessageResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429, default(ErrorResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"sentMessages\" : [ {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  } ]\n}";
            exampleJson =
                "{\n  \"details\" : [ {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  }, {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  } ],\n  \"message\" : \"message\",\n  \"sentMessages\" : [ {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  } ]\n}";
            exampleJson =
                "{\n  \"details\" : [ {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  }, {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  } ],\n  \"message\" : \"message\",\n  \"sentMessages\" : [ {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  } ]\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<ReplyMessageResponse>(exampleJson)
                    : default(ReplyMessageResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>You can use this endpoint to batch control the rich menu linked to the users using the endpoint such as Link rich menu to user. The following operations are available:  1. Replace a rich menu with another rich menu for all users linked to a specific rich menu 2. Unlink a rich menu for all users linked to a specific rich menu 3. Unlink a rich menu for all users linked the rich menu </remarks>
        /// <param name="richMenuBatchRequest"></param>
        /// <response code="202">Accepted</response>
        [HttpPost]
        [Route("/v2/bot/richmenu/batch")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("RichMenuBatch")]
        public virtual IActionResult RichMenuBatch(
            [FromBody] RichMenuBatchRequest richMenuBatchRequest
        )
        {
            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202);

            throw new NotImplementedException();
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Set default rich menu</remarks>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v2/bot/user/all/richmenu/{richMenuId}")]
        [ValidateModelState]
        [SwaggerOperation("SetDefaultRichMenu")]
        public virtual IActionResult SetDefaultRichMenu(
            [FromRoute(Name = "richMenuId")] [Required] string richMenuId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Set webhook endpoint URL</remarks>
        /// <param name="setWebhookEndpointRequest"></param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/v2/bot/channel/webhook/endpoint")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("SetWebhookEndpoint")]
        public virtual IActionResult SetWebhookEndpoint(
            [FromBody] SetWebhookEndpointRequest setWebhookEndpointRequest
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Display a loading animation in one-on-one chats between users and LINE Official Accounts.</remarks>
        /// <param name="showLoadingAnimationRequest"></param>
        /// <response code="202">Accepted</response>
        /// <response code="400">An invalid chat ID is specified, or the loadingSeconds value is invalid.</response>
        [HttpPost]
        [Route("/v2/bot/chat/loading/start")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ShowLoadingAnimation")]
        [SwaggerResponse(statusCode: 202, type: typeof(Object), description: "Accepted")]
        [SwaggerResponse(
            statusCode: 400,
            type: typeof(ErrorResponse),
            description: "An invalid chat ID is specified, or the loadingSeconds value is invalid."
        )]
        public virtual IActionResult ShowLoadingAnimation(
            [FromBody] ShowLoadingAnimationRequest showLoadingAnimationRequest
        )
        {
            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202, default(Object));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"details\" : [ {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  }, {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  } ],\n  \"message\" : \"message\",\n  \"sentMessages\" : [ {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  } ]\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<Object>(exampleJson)
                    : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Test webhook endpoint</remarks>
        /// <param name="testWebhookEndpointRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v2/bot/channel/webhook/test")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("TestWebhookEndpoint")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(TestWebhookEndpointResponse),
            description: "OK"
        )]
        public virtual IActionResult TestWebhookEndpoint(
            [FromBody] TestWebhookEndpointRequest testWebhookEndpointRequest
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(TestWebhookEndpointResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"reason\" : \"reason\",\n  \"success\" : true,\n  \"detail\" : \"detail\",\n  \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statusCode\" : 0\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<TestWebhookEndpointResponse>(exampleJson)
                    : default(TestWebhookEndpointResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Unlink rich menu from user</remarks>
        /// <param name="userId">User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.</param>
        /// <response code="200">OK</response>
        [HttpDelete]
        [Route("/v2/bot/user/{userId}/richmenu")]
        [ValidateModelState]
        [SwaggerOperation("UnlinkRichMenuIdFromUser")]
        public virtual IActionResult UnlinkRichMenuIdFromUser(
            [FromRoute(Name = "userId")] [Required] string userId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Unlink rich menus from multiple users</remarks>
        /// <param name="richMenuBulkUnlinkRequest"></param>
        /// <response code="202">Accepted</response>
        [HttpPost]
        [Route("/v2/bot/richmenu/bulk/unlink")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UnlinkRichMenuIdFromUsers")]
        public virtual IActionResult UnlinkRichMenuIdFromUsers(
            [FromBody] RichMenuBulkUnlinkRequest richMenuBulkUnlinkRequest
        )
        {
            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202);

            throw new NotImplementedException();
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Update rich menu alias</remarks>
        /// <param name="richMenuAliasId">The rich menu alias ID you want to update.</param>
        /// <param name="updateRichMenuAliasRequest"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        [HttpPost]
        [Route("/v2/bot/richmenu/alias/{richMenuAliasId}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateRichMenuAlias")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        public virtual IActionResult UpdateRichMenuAlias(
            [FromRoute(Name = "richMenuAliasId")] [Required] string richMenuAliasId,
            [FromBody] UpdateRichMenuAliasRequest updateRichMenuAliasRequest
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Validate message objects of a broadcast message</remarks>
        /// <param name="validateMessageRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v2/bot/message/validate/broadcast")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ValidateBroadcast")]
        public virtual IActionResult ValidateBroadcast(
            [FromBody] ValidateMessageRequest validateMessageRequest
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Validate message objects of a multicast message</remarks>
        /// <param name="validateMessageRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v2/bot/message/validate/multicast")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ValidateMulticast")]
        public virtual IActionResult ValidateMulticast(
            [FromBody] ValidateMessageRequest validateMessageRequest
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Validate message objects of a narrowcast message</remarks>
        /// <param name="validateMessageRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v2/bot/message/validate/narrowcast")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ValidateNarrowcast")]
        public virtual IActionResult ValidateNarrowcast(
            [FromBody] ValidateMessageRequest validateMessageRequest
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Validate message objects of a push message</remarks>
        /// <param name="validateMessageRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v2/bot/message/validate/push")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ValidatePush")]
        public virtual IActionResult ValidatePush(
            [FromBody] ValidateMessageRequest validateMessageRequest
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Validate message objects of a reply message</remarks>
        /// <param name="validateMessageRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v2/bot/message/validate/reply")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ValidateReply")]
        public virtual IActionResult ValidateReply(
            [FromBody] ValidateMessageRequest validateMessageRequest
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Validate a request body of the Replace or unlink the linked rich menus in batches endpoint.</remarks>
        /// <param name="richMenuBatchRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v2/bot/richmenu/validate/batch")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ValidateRichMenuBatchRequest")]
        public virtual IActionResult ValidateRichMenuBatchRequest(
            [FromBody] RichMenuBatchRequest richMenuBatchRequest
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Validate rich menu object</remarks>
        /// <param name="richMenuRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v2/bot/richmenu/validate")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ValidateRichMenuObject")]
        public virtual IActionResult ValidateRichMenuObject(
            [FromBody] RichMenuRequest richMenuRequest
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }
    }
}
