/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json;
using Liny.Core.Attributes;
using Liny.Core.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;

namespace Liny.Core.Controllers
{
    /// <summary>
    ///
    /// </summary>
    [ApiController]
    public class ManageAudienceBlobApiController : ControllerBase
    {
        /// <summary>
        ///
        /// </summary>
        /// <remarks>Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by file).</remarks>
        /// <param name="file">A text file with one user ID or IFA entered per line. Specify text/plain as Content-Type. Max file number: 1 Max number: 1,500,000 </param>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="uploadDescription">The description to register with the job</param>
        /// <response code="202">OK</response>
        [HttpPut]
        [Route("/v2/bot/audienceGroup/upload/byFile")]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [SwaggerOperation("AddUserIdsToAudience")]
        public virtual IActionResult AddUserIdsToAudience(
            [Required()] IFormFile file,
            [FromForm(Name = "audienceGroupId")] long? audienceGroupId,
            [FromForm(Name = "uploadDescription")] string uploadDescription
        )
        {
            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202);

            throw new NotImplementedException();
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Create audience for uploading user IDs (by file).</remarks>
        /// <param name="file">A text file with one user ID or IFA entered per line. Specify text/plain as Content-Type. Max file number: 1 Max number: 1,500,000 </param>
        /// <param name="description">The audience&#39;s name. This is case-insensitive, meaning AUDIENCE and audience are considered identical. Max character limit: 120 </param>
        /// <param name="isIfaAudience">To specify recipients by IFAs: set &#x60;true&#x60;. To specify recipients by user IDs: set &#x60;false&#x60; or omit isIfaAudience property. </param>
        /// <param name="uploadDescription">The description to register for the job (in &#x60;jobs[].description&#x60;). </param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v2/bot/audienceGroup/upload/byFile")]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [SwaggerOperation("CreateAudienceForUploadingUserIds")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(CreateAudienceGroupResponse),
            description: "OK"
        )]
        public virtual IActionResult CreateAudienceForUploadingUserIds(
            [Required()] IFormFile file,
            [FromForm(Name = "description")] [MaxLength(120)] string description,
            [FromForm(Name = "isIfaAudience")] bool? isIfaAudience,
            [FromForm(Name = "uploadDescription")] string uploadDescription
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CreateAudienceGroupResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"expireTimestamp\" : 1.4658129805029452,\n  \"createRoute\" : \"MESSAGING_API\",\n  \"created\" : 6,\n  \"description\" : \"description\",\n  \"permission\" : \"READ\",\n  \"isIfaAudience\" : true,\n  \"type\" : \"UPLOAD\",\n  \"audienceGroupId\" : 0\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<CreateAudienceGroupResponse>(exampleJson)
                    : default(CreateAudienceGroupResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
