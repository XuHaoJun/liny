/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json;
using Liny.Core.Attributes;
using Liny.Core.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;

namespace Liny.Core.Controllers
{
    /// <summary>
    ///
    /// </summary>
    [ApiController]
    public class LineModuleAttachApiController : ControllerBase
    {
        /// <summary>
        ///
        /// </summary>
        /// <remarks>Attach by operation of the module channel provider</remarks>
        /// <param name="grantType">authorization_code</param>
        /// <param name="code">Authorization code received from the LINE Platform.</param>
        /// <param name="redirectUri">Specify the redirect_uri specified in the URL for authentication and authorization.</param>
        /// <param name="codeVerifier">Specify when using PKCE (Proof Key for Code Exchange) defined in the OAuth 2.0 extension specification as a countermeasure against authorization code interception attacks.</param>
        /// <param name="clientId">Instead of using Authorization header, you can use this parameter to specify the channel ID of the module channel. You can find the channel ID of the module channel in the LINE Developers Console. </param>
        /// <param name="clientSecret">Instead of using Authorization header, you can use this parameter to specify the channel secret of the module channel. You can find the channel secret of the module channel in the LINE Developers Console. </param>
        /// <param name="region">If you specified a value for region in the URL for authentication and authorization, specify the same value. </param>
        /// <param name="basicSearchId">If you specified a value for basic_search_id in the URL for authentication and authorization, specify the same value.</param>
        /// <param name="scope">If you specified a value for scope in the URL for authentication and authorization, specify the same value.</param>
        /// <param name="brandType">If you specified a value for brand_type in the URL for authentication and authorization, specify the same value.</param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/module/auth/v1/token")]
        [Consumes("application/x-www-form-urlencoded")]
        [ValidateModelState]
        [SwaggerOperation("AttachModule")]
        [SwaggerResponse(statusCode: 200, type: typeof(AttachModuleResponse), description: "OK")]
        public virtual IActionResult AttachModule(
            [FromForm(Name = "grant_type")] [Required()] string grantType,
            [FromForm(Name = "code")] [Required()] string code,
            [FromForm(Name = "redirect_uri")] [Required()] string redirectUri,
            [FromForm(Name = "code_verifier")] string codeVerifier,
            [FromForm(Name = "client_id")] string clientId,
            [FromForm(Name = "client_secret")] string clientSecret,
            [FromForm(Name = "region")] string region,
            [FromForm(Name = "basic_search_id")] string basicSearchId,
            [FromForm(Name = "scope")] string scope,
            [FromForm(Name = "brand_type")] string brandType
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AttachModuleResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"scopes\" : [ \"scopes\", \"scopes\" ],\n  \"bot_id\" : \"bot_id\"\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<AttachModuleResponse>(exampleJson)
                    : default(AttachModuleResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
