/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json;
using Liny.Core.Attributes;
using Liny.Core.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;

namespace Liny.Core.Controllers
{
    /// <summary>
    ///
    /// </summary>
    [ApiController]
    public class MessagingApiBlobApiController : ControllerBase
    {
        /// <summary>
        ///
        /// </summary>
        /// <remarks>Download image, video, and audio data sent from users.</remarks>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/message/{messageId}/content")]
        [ValidateModelState]
        [SwaggerOperation("GetMessageContent")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "OK")]
        public virtual IActionResult GetMessageContent(
            [FromRoute(Name = "messageId")] [Required] string messageId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            string exampleJson = null;

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<System.IO.Stream>(exampleJson)
                    : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Get a preview image of the image or video</remarks>
        /// <param name="messageId">Message ID of image or video</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/message/{messageId}/content/preview")]
        [ValidateModelState]
        [SwaggerOperation("GetMessageContentPreview")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "OK")]
        public virtual IActionResult GetMessageContentPreview(
            [FromRoute(Name = "messageId")] [Required] string messageId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            string exampleJson = null;

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<System.IO.Stream>(exampleJson)
                    : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Verify the preparation status of a video or audio for getting</remarks>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/message/{messageId}/content/transcoding")]
        [ValidateModelState]
        [SwaggerOperation("GetMessageContentTranscodingByMessageId")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(GetMessageContentTranscodingResponse),
            description: "OK"
        )]
        public virtual IActionResult GetMessageContentTranscodingByMessageId(
            [FromRoute(Name = "messageId")] [Required] string messageId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetMessageContentTranscodingResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : \"processing\"\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<GetMessageContentTranscodingResponse>(exampleJson)
                    : default(GetMessageContentTranscodingResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Download rich menu image.</remarks>
        /// <param name="richMenuId">ID of the rich menu with the image to be downloaded</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/richmenu/{richMenuId}/content")]
        [ValidateModelState]
        [SwaggerOperation("GetRichMenuImage")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "OK")]
        public virtual IActionResult GetRichMenuImage(
            [FromRoute(Name = "richMenuId")] [Required] string richMenuId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            string exampleJson = null;

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<System.IO.Stream>(exampleJson)
                    : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Upload rich menu image</remarks>
        /// <param name="richMenuId">The ID of the rich menu to attach the image to</param>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v2/bot/richmenu/{richMenuId}/content")]
        [ValidateModelState]
        [SwaggerOperation("SetRichMenuImage")]
        public virtual IActionResult SetRichMenuImage(
            [FromRoute(Name = "richMenuId")] [Required] string richMenuId,
            [FromBody] System.IO.Stream body
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }
    }
}
