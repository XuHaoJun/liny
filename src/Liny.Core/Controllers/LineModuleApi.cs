/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using System.Text.Json;
using Liny.Core.Attributes;
using Liny.Core.Models;

namespace Liny.Core.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class LineModuleApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>If the Standby Channel wants to take the initiative (Chat Control), it calls the Acquire Control API. The channel that was previously an Active Channel will automatically switch to a Standby Channel. </remarks>
        /// <param name="chatId">The &#x60;userId&#x60;, &#x60;roomId&#x60;, or &#x60;groupId&#x60;</param>
        /// <param name="acquireChatControlRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v2/bot/chat/{chatId}/control/acquire")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("AcquireChatControl")]
        public virtual IActionResult AcquireChatControl([FromRoute (Name = "chatId")][Required]string chatId, [FromBody]AcquireChatControlRequest acquireChatControlRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>The module channel admin calls the Detach API to detach the module channel from a LINE Official Account.</remarks>
        /// <param name="detachModuleRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v2/bot/channel/detach")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("DetachModule")]
        public virtual IActionResult DetachModule([FromBody]DetachModuleRequest detachModuleRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Gets a list of basic information about the bots of multiple LINE Official Accounts that have attached module channels.</remarks>
        /// <param name="start">Value of the continuation token found in the next property of the JSON object returned in the response. If you can&#39;t get all basic information about the bots in one request, include this parameter to get the remaining array. </param>
        /// <param name="limit">Specify the maximum number of bots that you get basic information from. The default value is 100. Max value: 100 </param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/list")]
        [ValidateModelState]
        [SwaggerOperation("GetModules")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetModulesResponse), description: "OK")]
        public virtual IActionResult GetModules([FromQuery (Name = "start")]string start, [FromQuery (Name = "limit")]int? limit)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetModulesResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"next\" : \"next\",\n  \"bots\" : [ {\n    \"displayName\" : \"displayName\",\n    \"basicId\" : \"basicId\",\n    \"pictureUrl\" : \"pictureUrl\",\n    \"premiumId\" : \"premiumId\",\n    \"userId\" : \"userId\"\n  }, {\n    \"displayName\" : \"displayName\",\n    \"basicId\" : \"basicId\",\n    \"pictureUrl\" : \"pictureUrl\",\n    \"premiumId\" : \"premiumId\",\n    \"userId\" : \"userId\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<GetModulesResponse>(exampleJson)
            : default(GetModulesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>To return the initiative (Chat Control) of Active Channel to Primary Channel, call the Release Control API. </remarks>
        /// <param name="chatId">The &#x60;userId&#x60;, &#x60;roomId&#x60;, or &#x60;groupId&#x60;</param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v2/bot/chat/{chatId}/control/release")]
        [ValidateModelState]
        [SwaggerOperation("ReleaseChatControl")]
        public virtual IActionResult ReleaseChatControl([FromRoute (Name = "chatId")][Required]string chatId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }
    }
}
