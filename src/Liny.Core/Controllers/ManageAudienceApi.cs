/*
 * Merged API
 *
 * Merged OpenAPI specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json;
using Liny.Core.Attributes;
using Liny.Core.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;

namespace Liny.Core.Controllers
{
    /// <summary>
    ///
    /// </summary>
    [ApiController]
    public class ManageAudienceApiController : ControllerBase
    {
        /// <summary>
        ///
        /// </summary>
        /// <remarks>Activate audience</remarks>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <response code="202">Accepted</response>
        [HttpPut]
        [Route("/v2/bot/audienceGroup/{audienceGroupId}/activate")]
        [ValidateModelState]
        [SwaggerOperation("ActivateAudienceGroup")]
        public virtual IActionResult ActivateAudienceGroup(
            [FromRoute(Name = "audienceGroupId")] [Required] long audienceGroupId
        )
        {
            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202);

            throw new NotImplementedException();
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by JSON)</remarks>
        /// <param name="addAudienceToAudienceGroupRequest"></param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/v2/bot/audienceGroup/upload")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("AddAudienceToAudienceGroup")]
        public virtual IActionResult AddAudienceToAudienceGroup(
            [FromBody] AddAudienceToAudienceGroupRequest addAudienceToAudienceGroupRequest
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Create audience for uploading user IDs (by JSON)</remarks>
        /// <param name="createAudienceGroupRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v2/bot/audienceGroup/upload")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateAudienceGroup")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(CreateAudienceGroupResponse),
            description: "OK"
        )]
        public virtual IActionResult CreateAudienceGroup(
            [FromBody] CreateAudienceGroupRequest createAudienceGroupRequest
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CreateAudienceGroupResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"expireTimestamp\" : 1.4658129805029452,\n  \"createRoute\" : \"MESSAGING_API\",\n  \"created\" : 6,\n  \"description\" : \"description\",\n  \"permission\" : \"READ\",\n  \"isIfaAudience\" : true,\n  \"type\" : \"UPLOAD\",\n  \"audienceGroupId\" : 0\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<CreateAudienceGroupResponse>(exampleJson)
                    : default(CreateAudienceGroupResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Create audience for click-based retargeting</remarks>
        /// <param name="createClickBasedAudienceGroupRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v2/bot/audienceGroup/click")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateClickBasedAudienceGroup")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(CreateClickBasedAudienceGroupResponse),
            description: "OK"
        )]
        public virtual IActionResult CreateClickBasedAudienceGroup(
            [FromBody] CreateClickBasedAudienceGroupRequest createClickBasedAudienceGroupRequest
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CreateClickBasedAudienceGroupResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"clickUrl\" : \"https://openapi-generator.tech\",\n  \"expireTimestamp\" : 1,\n  \"created\" : 6,\n  \"requestId\" : \"requestId\",\n  \"createRoute\" : \"MESSAGING_API\",\n  \"description\" : \"description\",\n  \"permission\" : \"READ\",\n  \"isIfaAudience\" : false,\n  \"type\" : \"UPLOAD\",\n  \"audienceGroupId\" : 0\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<CreateClickBasedAudienceGroupResponse>(exampleJson)
                    : default(CreateClickBasedAudienceGroupResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Create audience for impression-based retargeting</remarks>
        /// <param name="createImpBasedAudienceGroupRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v2/bot/audienceGroup/imp")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateImpBasedAudienceGroup")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(CreateImpBasedAudienceGroupResponse),
            description: "OK"
        )]
        public virtual IActionResult CreateImpBasedAudienceGroup(
            [FromBody] CreateImpBasedAudienceGroupRequest createImpBasedAudienceGroupRequest
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CreateImpBasedAudienceGroupResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"created\" : 6,\n  \"requestId\" : \"requestId\",\n  \"description\" : \"description\",\n  \"type\" : \"UPLOAD\",\n  \"audienceGroupId\" : 0\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<CreateImpBasedAudienceGroupResponse>(exampleJson)
                    : default(CreateImpBasedAudienceGroupResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Delete audience</remarks>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <response code="200">OK</response>
        [HttpDelete]
        [Route("/v2/bot/audienceGroup/{audienceGroupId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteAudienceGroup")]
        public virtual IActionResult DeleteAudienceGroup(
            [FromRoute(Name = "audienceGroupId")] [Required] long audienceGroupId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Gets audience data.</remarks>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad request</response>
        [HttpGet]
        [Route("/v2/bot/audienceGroup/{audienceGroupId}")]
        [ValidateModelState]
        [SwaggerOperation("GetAudienceData")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetAudienceDataResponse), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad request")]
        public virtual IActionResult GetAudienceData(
            [FromRoute(Name = "audienceGroupId")] [Required] long audienceGroupId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetAudienceDataResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"audienceGroup\" : {\n    \"clickUrl\" : \"https://openapi-generator.tech\",\n    \"created\" : 1,\n    \"requestId\" : \"requestId\",\n    \"createRoute\" : \"OA_MANAGER\",\n    \"failedType\" : \"AUDIENCE_GROUP_AUDIENCE_INSUFFICIENT\",\n    \"audienceCount\" : 6,\n    \"description\" : \"description\",\n    \"isIfaAudience\" : true,\n    \"permission\" : \"READ\",\n    \"type\" : \"UPLOAD\",\n    \"audienceGroupId\" : 0,\n    \"status\" : \"IN_PROGRESS\"\n  },\n  \"jobs\" : [ {\n    \"jobStatus\" : \"QUEUED\",\n    \"created\" : 7,\n    \"failedType\" : \"INTERNAL_ERROR\",\n    \"audienceCount\" : 2,\n    \"description\" : \"description\",\n    \"audienceGroupJobId\" : 5,\n    \"type\" : \"DIFF_ADD\",\n    \"audienceGroupId\" : 5\n  }, {\n    \"jobStatus\" : \"QUEUED\",\n    \"created\" : 7,\n    \"failedType\" : \"INTERNAL_ERROR\",\n    \"audienceCount\" : 2,\n    \"description\" : \"description\",\n    \"audienceGroupJobId\" : 5,\n    \"type\" : \"DIFF_ADD\",\n    \"audienceGroupId\" : 5\n  }, {\n    \"jobStatus\" : \"QUEUED\",\n    \"created\" : 7,\n    \"failedType\" : \"INTERNAL_ERROR\",\n    \"audienceCount\" : 2,\n    \"description\" : \"description\",\n    \"audienceGroupJobId\" : 5,\n    \"type\" : \"DIFF_ADD\",\n    \"audienceGroupId\" : 5\n  }, {\n    \"jobStatus\" : \"QUEUED\",\n    \"created\" : 7,\n    \"failedType\" : \"INTERNAL_ERROR\",\n    \"audienceCount\" : 2,\n    \"description\" : \"description\",\n    \"audienceGroupJobId\" : 5,\n    \"type\" : \"DIFF_ADD\",\n    \"audienceGroupId\" : 5\n  }, {\n    \"jobStatus\" : \"QUEUED\",\n    \"created\" : 7,\n    \"failedType\" : \"INTERNAL_ERROR\",\n    \"audienceCount\" : 2,\n    \"description\" : \"description\",\n    \"audienceGroupJobId\" : 5,\n    \"type\" : \"DIFF_ADD\",\n    \"audienceGroupId\" : 5\n  } ]\n}";
            exampleJson =
                "{\n  \"details\" : [ {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  }, {\n    \"property\" : \"property\",\n    \"message\" : \"message\"\n  } ],\n  \"message\" : \"message\",\n  \"sentMessages\" : [ {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  }, {\n    \"quoteToken\" : \"quoteToken\",\n    \"id\" : \"id\"\n  } ]\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<GetAudienceDataResponse>(exampleJson)
                    : default(GetAudienceDataResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Get the authority level of the audience</remarks>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/audienceGroup/authorityLevel")]
        [ValidateModelState]
        [SwaggerOperation("GetAudienceGroupAuthorityLevel")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(GetAudienceGroupAuthorityLevelResponse),
            description: "OK"
        )]
        public virtual IActionResult GetAudienceGroupAuthorityLevel()
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetAudienceGroupAuthorityLevelResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"authorityLevel\" : \"PUBLIC\"\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<GetAudienceGroupAuthorityLevelResponse>(
                        exampleJson
                    )
                    : default(GetAudienceGroupAuthorityLevelResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Gets data for more than one audience.</remarks>
        /// <param name="page">The page to return when getting (paginated) results. Must be 1 or higher.</param>
        /// <param name="description">The name of the audience(s) to return. You can search for partial matches. This is case-insensitive, meaning AUDIENCE and audience are considered identical. If omitted, the name of the audience(s) will not be used as a search criterion. </param>
        /// <param name="status">The status of the audience(s) to return. If omitted, the status of the audience(s) will not be used as a search criterion. </param>
        /// <param name="size">The number of audiences per page. Default: 20 Max: 40 </param>
        /// <param name="includesExternalPublicGroups">true (default): Get public audiences created in all channels linked to the same bot. false: Get audiences created in the same channel. </param>
        /// <param name="createRoute">How the audience was created. If omitted, all audiences are included.  &#x60;OA_MANAGER&#x60;: Return only audiences created with LINE Official Account Manager (opens new window). &#x60;MESSAGING_API&#x60;: Return only audiences created with Messaging API. </param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v2/bot/audienceGroup/list")]
        [ValidateModelState]
        [SwaggerOperation("GetAudienceGroups")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(GetAudienceGroupsResponse),
            description: "OK"
        )]
        public virtual IActionResult GetAudienceGroups(
            [FromQuery(Name = "page")] [Required()] long page,
            [FromQuery(Name = "description")] string description,
            [FromQuery(Name = "status")] AudienceGroupStatus? status,
            [FromQuery(Name = "size")] long? size,
            [FromQuery(Name = "includesExternalPublicGroups")] bool? includesExternalPublicGroups,
            [FromQuery(Name = "createRoute")] AudienceGroupCreateRoute? createRoute
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetAudienceGroupsResponse));
            string exampleJson = null;
            exampleJson =
                "{\n  \"audienceGroups\" : [ {\n    \"clickUrl\" : \"https://openapi-generator.tech\",\n    \"created\" : 1,\n    \"requestId\" : \"requestId\",\n    \"createRoute\" : \"OA_MANAGER\",\n    \"failedType\" : \"AUDIENCE_GROUP_AUDIENCE_INSUFFICIENT\",\n    \"audienceCount\" : 6,\n    \"description\" : \"description\",\n    \"isIfaAudience\" : true,\n    \"permission\" : \"READ\",\n    \"type\" : \"UPLOAD\",\n    \"audienceGroupId\" : 0,\n    \"status\" : \"IN_PROGRESS\"\n  }, {\n    \"clickUrl\" : \"https://openapi-generator.tech\",\n    \"created\" : 1,\n    \"requestId\" : \"requestId\",\n    \"createRoute\" : \"OA_MANAGER\",\n    \"failedType\" : \"AUDIENCE_GROUP_AUDIENCE_INSUFFICIENT\",\n    \"audienceCount\" : 6,\n    \"description\" : \"description\",\n    \"isIfaAudience\" : true,\n    \"permission\" : \"READ\",\n    \"type\" : \"UPLOAD\",\n    \"audienceGroupId\" : 0,\n    \"status\" : \"IN_PROGRESS\"\n  } ],\n  \"readWriteAudienceGroupTotalCount\" : 6,\n  \"size\" : 5,\n  \"hasNextPage\" : true,\n  \"page\" : 1,\n  \"totalCount\" : 0\n}";

            var example =
                exampleJson != null
                    ? JsonSerializer.Deserialize<GetAudienceGroupsResponse>(exampleJson)
                    : default(GetAudienceGroupsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Change the authority level of the audience</remarks>
        /// <param name="updateAudienceGroupAuthorityLevelRequest"></param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/v2/bot/audienceGroup/authorityLevel")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateAudienceGroupAuthorityLevel")]
        public virtual IActionResult UpdateAudienceGroupAuthorityLevel(
            [FromBody]
                UpdateAudienceGroupAuthorityLevelRequest updateAudienceGroupAuthorityLevelRequest
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>Renames an existing audience.</remarks>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="updateAudienceGroupDescriptionRequest"></param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/v2/bot/audienceGroup/{audienceGroupId}/updateDescription")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateAudienceGroupDescription")]
        public virtual IActionResult UpdateAudienceGroupDescription(
            [FromRoute(Name = "audienceGroupId")] [Required] long audienceGroupId,
            [FromBody] UpdateAudienceGroupDescriptionRequest updateAudienceGroupDescriptionRequest
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }
    }
}
